#Define:Header(quantity, unitName, singularUnits, pluralUnits)
/// TODO Write header documentation for #Param:quantity#.
#/

#Define:Zero(quantity, dimensionality)
/// <summary>The zero-magnitude <see cref="#Param:quantity#"/>.</summary>
#/

#Define:ComponentX(quantity, dimensionality, unit, pluralUnits)
/// <summary>The magnitude of the X-component of the <see cref="#Param:quantity#"/>, in SI units.</summary>
/// <remarks>For clarity, consider preferring <see cref="InUnit(#Param:unit#)"/> or a pre-defined property
/// - such as <see cref="#Param:pluralUnits[%0]#"/>.</remarks>
#/

#Define:ComponentY(quantity, dimensionality, unit, pluralUnits)
/// <summary>The magnitude of the Y-component of the <see cref="#Param:quantity#"/>, in SI units.</summary>
/// <remarks>For clarity, consider preferring <see cref="InUnit(#Param:unit#)"/> or a pre-defined property
/// - such as <see cref="#Param:pluralUnits[%0]#"/>.</remarks>
#/

#Define:ComponentZ(quantity, dimensionality, unit, pluralUnits)
/// <summary>The magnitude of the Z-component of the <see cref="#Param:quantity#"/>, in SI units.</summary>
/// <remarks>For clarity, consider preferring <see cref="InUnit(#Param:unit#)"/> or a pre-defined property
/// - such as <see cref="#Param:pluralUnits[%0]#"/>.</remarks>
#/

#Define:Components(quantity, dimensionality, unit, pluralUnits)
/// <summary>Retrieves the magnitudes of the components of the <see cref="#Param:quantity#"/>, in SI units.</summary>
/// <remarks>For clarity, consider preferring <see cref="InUnit(#Param:unit#)"/> or a pre-defined property
/// - such as <see cref="#Param:pluralUnits[%0]#"/>.</remarks>
#/

#Define:ConstructorComponentTuple(quantity, dimensionality)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components <paramref name="components"/>.</summary>
/// <param name="components">The components of the <see cref="#Param:quantity#"/>.</param>
#/

#Define:ConstructorComponents(quantity, dimensionality)
#Document:ConstructorComponents#Param:dimensionality#(#Param:quantity#)#
#/

#Define:ConstructorComponents3(quantity)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>).</summary>
/// <param name="x">The X-component of the <see cref="#Param:quantity#"/>.</param>
/// <param name="y">The Y-component of the <see cref="#Param:quantity#"/>.</param>
/// <param name="z">The Z-component of the <see cref="#Param:quantity#"/>.</param>
#/

#Define:ConstructorScalarTupleUnit(quantity, dimensionality, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes <paramref name="components"/>,
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="components">The magnitudes of the components of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitudes of the components, <paramref name="components"/>, are expressed.</param>
#/

#Define:ConstructorScalarsUnit(quantity, dimensionality, unit, unitVariable)
#Document:ConstructorScalarsUnit#Param:dimensionality#(#Param:quantity#, #Param:unit#, #Param:unitVariable#)#
#/

#Define:ConstructorScalarsUnit3(quantity, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>),
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="x">The magnitude of the X-component of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="y">The magnitude of the Y-component of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="z">The magnitude of the Z-component of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitudes of the components,
/// (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>), are expressed.</param>
#/

#Define:ConstructorVectorUnit(quantity, dimensionality, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes <paramref name="components"/>,
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="components">The magnitudes of the components of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitudes of the components,
/// <paramref name="components"/>, are expressed.</param>
#/

#Define:ConstructorDoubleTupleUnit(quantity, dimensionality, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes <paramref name="components"/>,
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="components">The magnitudes of the components of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitudes of the components, <paramref name="components"/>, are expressed.</param>
#/

#Define:ConstructorDoublesUnit(quantity, dimensionality, unit, unitVariable)
#Document:ConstructorDoublesUnit#Param:dimensionality#(#Param:quantity#, #Param:unit#, #Param:unitVariable#)#
#/

#Define:ConstructorDoublesUnit3(quantity, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>),
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="x">The magnitude of the X-component of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="y">The magnitude of the Y-component of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="z">The magnitude of the Z-component of the <see cref="#Param:quantity#"/>, expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitudes of the components,
/// (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>), are expressed.</param>
#/

#Define:ConstructorScalarTuple(quantity, dimensionality, unit, unitVariable)
#Document:ConstructorScalarTuple#Param:dimensionality#(#Param:quantity#, #Param:unit#, #Param:unitVariable#)#
#/

#Define:ConstructorScalarTuple3(quantity, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes <paramref name="components"/>.</summary>
/// <param name="components">The magnitudes of the components of the <see cref="#Param:quantity#"/>.</param>
/// <remarks>Consider preferring <see cref="#Param:quantity#(ValueTuple{Scalar, Scalar, Scalar}, #Param:unit#)"/>.</remarks>
#/

#Define:ConstructorScalars(quantity, dimensionality, unit, unitVariable)
#Document:ConstructorScalars#Param:dimensionality#(#Param:quantity#, #Param:unit#, #Param:unitVariable#)#
#/

#Define:ConstructorScalars3(quantity, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>).</summary>
/// <param name="x">The magnitude of the X-component of the <see cref="#Param:quantity#"/>.</param>
/// <param name="y">The magnitude of the Y-component of the <see cref="#Param:quantity#"/>.</param>
/// <param name="z">The magnitude of the Z-component of the <see cref="#Param:quantity#"/>.</param>
/// <remarks>Consider preferring <see cref="#Param:quantity#(Scalar, Scalar, Scalar, #Param:unit#)"/>.</remarks>
#/

#Define:ConstructorVector(quantity, dimensionality, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes <paramref name="components"/>.</summary>
/// <param name="components">The magnitudes of the components of the <see cref="#Param:quantity#"/>.</param>
/// <remarks>Consider preferring <see cref="#Param:quantity#(Vector#Param:dimensionality#, #Param:unit#)"/>.</remarks>
#/

#Define:ConstructorDoubleTuple(quantity, dimensionality, unit, unitVariable)
#Document:ConstructorDoubleTuple#Param:dimensionality#(#Param:quantity#, #Param:unit#, #Param:unitVariable#)#
#/

#Define:ConstructorDoubleTuple3(quantity, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes <paramref name="components"/>.</summary>
/// <param name="components">The magnitudes of the components of the <see cref="#Param:quantity#"/>.</param>
/// <remarks>Consider preferring <see cref="#Param:quantity#(ValueTuple{double, double, double}, #Param:unit#)"/>.</remarks>
#/

#Define:ConstructorDoubles(quantity, dimensionality, unit, unitVariable)
#Document:ConstructorDoubles#Param:dimensionality#(#Param:quantity#, #Param:unit#, #Param:unitVariable#)#
#/

#Define:ConstructorDoubles3(quantity, unit, unitVariable)
/// <summary>Constructs a new <see cref="#Param:quantity#"/> with components of magnitudes (<paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>).</summary>
/// <param name="x">The magnitude of the X-component of the <see cref="#Param:quantity#"/>.</param>
/// <param name="y">The magnitude of the Y-component of the <see cref="#Param:quantity#"/>.</param>
/// <param name="z">The magnitude of the Z-component of the <see cref="#Param:quantity#"/>.</param>
/// <remarks>Consider preferring <see cref="#Param:quantity#(double, double, double, #Param:unit#)"/>.</remarks>
#/

#Define:AsShared(quantity, dimensionality, sharedQuantity)
/// <summary>Converts the <see cref="#Param:quantity#"/> to an instance of the associated quantity <see cref="#Param:sharedQuantity##Param:dimensionality#"/>, with components of
/// equal magnitudes.</summary> 
#/

#Define:InUnit(quantity, dimensionality, unit, unitName)
/// <summary>Retrieves the magnitudes of the components of the <see cref="#Param:quantity#"/>, expressed in <see cref="#Param:unit#.#Param:unitName#"/>.</summary>
#/

#Define:InConstant(quantity, unit, constant)
/// <summary>The number of multiples of the constant <see cref="#Param:unit#.#Param:constant#"/> that each component of the <see cref="#Param:quantity#"/> corresponds to.</summary>
#/

#Define:ScalarMagnitudeExplicit
/// <inheritdoc/>
#/

#Define:ScalarMagnitude(quantity, dimensionality, unit)
/// <summary>Computes the magnitude, or norm, of the vector quantity <see cref="#Param:quantity#"/>.</summary>
/// <remarks>For improved performance, consider preferring <see cref="SquaredMagnitude"/> when applicable. For clarity, also consider
/// first extracting the magnitudes of the components in the desired <see cref="#Param:unit#"/>.</remarks>
#/

#Define:ScalarQuantityMagnitude(quantity, dimensionality, component)
/// <summary>Computes the magnitude, or norm, of the vector quantity <see cref="#Param:quantity#"/>, as a <see cref="#Param:component#"/>.</summary>
/// <remarks>For improved performance, consider preferring <see cref="SquaredMagnitude"/> when applicable.</remarks>
#/

#Define:ScalarSquaredMagnitudeExplicit
/// <inheritdoc/>
#/

#Define:ScalarSquaredMagnitude(quantity, dimensionality, unit)
/// <summary>Computes the square of the magnitude, or norm, of the vector quantity <see cref="#Param:quantity#"/>.</summary>
/// <remarks>For clarity, consider first extracting the magnitudes of the components in the desired <see cref="#Param:unit#"/>.</remarks>
#/

#Define:ScalarQuantitySquaredMagnitude(quantity, dimensionality, component)
/// <summary>Computes the square of the magnitude, or norm, of the vector quantity <see cref="#Param:quantity#"/>, as a <see cref="#Param:component#"/>.</summary>
#/

#Define:Normalize(quantity, dimensionality)
/// <summary>Computes the normalized <see cref="#Param:quantity#"/> - if expressed in SI units.</summary>
/// <remarks>Note that the resulting <see cref="#Param:quantity#"/> will only be normalized if expressed in SI units.</remarks>
#/

#Define:Transform(quantity, dimensionality)
/// <summary>Computes the transformation of the <see cref="#Param:quantity#"/> by <paramref name="transform"/>.</summary>
/// <param name="transform">The <see cref="#Param:quantity#"/> is transformed by this <see cref="Matrix4x4"/>.</param>
#/

#Define:DotVector(quantity, dimensionality, component)
/// <summary>Performs dot-multiplication of the <see cref="#Param:quantity#"/> by <paramref name="factor"/>, resulting in a
/// <see cref="#Param:component#"/>.</summary>
/// <param name="factor">The <see cref="#Param:quantity#"/> is dot-multiplied by this <see cref="Vector#Param:dimensionality#"/>.</param>
#/

#Define:DotUnhandled(quantity, dimensionality)
/// <summary>Performs dot-multiplication of the <see cref="#Param:quantity#"/> by <paramref name="factor"/>, resulting in a
/// <see cref="Unhandled"/>.</summary>
/// <param name="factor">The <see cref="#Param:quantity#"/> is dot-multiplied by this <see cref="Unhandled#Param:dimensionality#"/>.</param>
#/

#Define:DotGeneric(quantity, dimensionality)
/// <inheritdoc/>
/// <exception cref="ArgumentNullException"/>
#/

#Define:CrossVector(quantity, dimensionality)
/// <summary>Performs cross-multiplication of the <see cref="#Param:quantity#"/> by <paramref name="factor"/>, resulting in a
/// <cref see="#Param:quantity#"/>.</summary>
/// <param name="factor">The <see cref="#Param:quantity#"/> is cross-multiplied by this <see cref="Vector#Param:dimensionality#"/>.</param>
#/

#Define:CrossUnhandled(quantity, dimensionality)
/// <summary>Performs cross-multiplication of the <see cref="#Param:quantity#"/> by <paramref name="factor"/>, resulting in a
/// <see cref="Unhandled#Param:dimensionality#"/>.</summary>
/// <param name="factor">The <see cref="#Param:quantity#"/> is cross-multiplied by this <see cref="Unhandled#Param:dimensionality#"/>.</param>
#/

#Define:CrossGeneric(quantity, dimensionality)
/// <inheritdoc/>
/// <exception cref="ArgumentNullException"/>
#/

#Define:ToString(quantity, dimensionality, unit, defaultUnit, defaultSymbol)
/// <summary>Produces a formatted string from the magnitudes of the components of the <see cref="#Param:quantity#"/> in the default unit
/// <see cref="#Param:unit#.#Param:defaultUnit#"/>, followed by the symbol [#Param:defaultSymbol#].</summary>
#/

#Define:InUnitInstance(quantity, dimensionality, unit, unitVariable)
/// <summary>Produces a <see cref="Vector#Param:dimensionality#"/> with components equal to that of the <see cref="#Param:quantity#"/>,
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitude is expressed.</param>
#/

#Define:InUnitStatic(quantity, quantityVariable, dimensionality, unit, unitVariable)
/// <summary>Produces a <see cref="Vector#Param:dimensionality#"/> with components equal to that of the <see cref="#Param:quantity#"/>,
/// expressed in <paramref name="#Param:unitVariable#"/>.</summary>
/// <param name="#Param:quantityVariable#">The <see cref="#Param:quantity#"/> to be expressed in <paramref name="#Param:unitVariable#"/>.</param>
/// <param name="#Param:unitVariable#">The <see cref="#Param:unit#"/> in which the magnitude is expressed.</param>
#/

#Define:PlusMethod(quantity, dimensionality)
/// <summary>Unary plus, resulting in the unmodified <see cref="#Param:quantity#"/>.</summary>
#/

#Define:NegateMethod(quantity, dimensionality)
/// <summary>Negation, resulting in a <see cref="#Param:quantity#"/> with negated components.</summary>
#/

#Define:PlusOperator(quantity, dimensionality)
/// <summary>Unary plus, resulting in the unmodified <paramref name="a"/>.</summary>
/// <param name="a">Unary plus is applied to this <see cref="#Param:quantity#"/>.</param>
#/

#Define:NegateOperator(quantity, dimensionality)
/// <summary>Negation, resulting in a <see cref="#Param:quantity#"/> with negated components from that of <paramref name="a"/>.</summary>
/// <param name="a">Negation is applied to this <see cref="#Param:quantity#"/>.</param>
#/

#Define:MultiplyUnhandledMethod(quantity, dimensionality)
/// <summary>Multiplicates the <see cref="#Param:quantity#"/> by the <see cref="Unhandled"/> quantity <paramref name="factor"/>
/// - resulting in an <see cref="Unhandled#Param:dimensionality#"/> quantity.</summary>
/// <param name="factor">The factor by which the <see cref="#Param:quantity#"/> is multiplied.</param>
#/

#Define:DivideUnhandledMethod(quantity, dimensionality)
/// <summary>Divides the <see cref="#Param:quantity#"/> by the <see cref="Unhandled"/> quantity <paramref name="divisor"/>
/// - resulting in an <see cref="Unhandled#Param:dimensionality#"/> quantity.</summary>
/// <param name="divisor">The divisor by which the <see cref="#Param:quantity#"/> is divided.</param>
#/

#Define:MultiplyUnhandledOperatorLHS(quantity, dimensionality)
/// <summary>Multiplication of the <see cref="#Param:quantity#"/> <paramref name="a"/> by the <see cref="Unhandled"/> quantity <paramref name="b"/> -
/// resulting in an <see cref="Unhandled#Param:dimensionality#"/> quantity.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is multiplied by the <see cref="Unhandled"/> quantity <paramref name="b"/>.</param>
/// <param name="b">The <see cref="Unhandled"/> quantity by which the <see cref="#Param:quantity#"/> <paramref name="a"/> is multiplied.</param>
#/

#Define:MultiplyUnhandledOperatorRHS(quantity, dimensionality)
/// <summary>Multiplication of the <see cref="Unhandled"/> quantity <paramref name="b"/> by the <see cref="#Param:quantity#"/> <paramref name="a"/> -
/// resulting in an <see cref="Unhandled#Param:dimensionality#"/> quantity.</summary>
/// <param name="a">The <see cref="Unhandled"/> quantity by which the <see cref="#Param:quantity#"/> <paramref name="b"/> is multiplied.</param>
/// <param name="b">The <see cref="#Param:quantity#"/>, which is multiplied by the <see cref="Unhandled"/> quantity <paramref name="a"/>.</param>
#/

#Define:DivideUnhandledOperator(quantity, dimensionality)
/// <summary>Division of the <see cref="#Param:quantity#"/> <paramref name="a"/> by the <see cref="Unhandled"/> quantity <paramref name="b"/> -
/// resulting in an <see cref="Unhandled#Param:dimensionality#"/> quantity.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is divided by the <see cref="Unhandled"/> quantity <paramref name="b"/>.</param>
/// <param name="b">The <see cref="Unhandled"/> quantity by which the <see cref="#Param:quantity#"/> <paramref name="a"/> is divded.</param>
#/

#Define:RemainderDoubleMethod(quantity, dimensionality)
/// <summary>Produces a <see cref="#Param:quantity#"/>, with each component equal to the remainder from division of the
/// magnitude of the original component by <paramref name="divisor"/>.</summary>
/// <param name="divisor">The remainder is produced from division by this value.</param>
#/

#Define:MultiplyDoubleMethod(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> by <paramref name="factor"/>.</summary>
/// <param name="factor">The factor by which the <see cref="#Param:quantity#"/> is scaled.</param>
#/

#Define:DivideDoubleMethod(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> through division by <paramref name="divisor"/>.</summary>
/// <param name="divisor">The divisor, by which the <see cref="#Param:quantity#"/> is divided.</param>
#/

#Define:RemainderDoubleOperator(quantity, dimensionality)
/// <summary>Produces a <see cref="#Param:quantity#"/>, with each component equal to the remainder from division of the
/// magnitude of the component of <paramref name="a"/> by <paramref name="b"/>.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, the components of which are divided by <paramref name="b"/> to produce a remainder.</param>
/// <param name="b">The remainder is produced from division of <see cref="#Param:quantity#"/> <paramref name="a"/> by this value.</param>
#/

#Define:MultiplyDoubleOperatorLHS(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> <paramref name="a"/> by <paramref name="b"/>.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is scaled by <paramref name="b"/>.</param>
/// <param name="b">This value is used to scale the <see cref="#Param:quantity#"/> <paramref name="a"/>.</param>
#/

#Define:MultiplyDoubleOperatorRHS(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> <paramref name="a"/> by <paramref name="b"/>.</summary>
/// <param name="a">This value is used to scale the <see cref="#Param:quantity#"/> <paramref name="b"/>.</param>
/// <param name="b">The <see cref="#Param:quantity#"/>, which is scaled by <paramref name="a"/>.</param>
#/

#Define:DivideDoubleOperator(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> <paramref name="a"/> through division by <paramref name="b"/>.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is divided by <paramref name="b"/>.</param>
/// <param name="b">This value is used to divide the <see cref="#Param:quantity#"/> <paramref name="a"/>.</param>
#/

#Define:RemainderScalarMethod(quantity, dimensionality)
/// <summary>Produces a <see cref="#Param:quantity#"/>, with each component equal to the remainder from division of the
/// magnitude of the original component by <paramref name="divisor"/>.</summary>
/// <param name="divisor">The remainder is produced from division by this value.</param>
#/

#Define:MultiplyScalarMethod(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> by <paramref name="factor"/>.</summary>
/// <param name="factor">The factor by which the <see cref="#Param:quantity#"/> is scaled.</param>
#/

#Define:DivideScalarMethod(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> through division by <paramref name="divisor"/>.</summary>
/// <param name="divisor">The divisor, by which the <see cref="#Param:quantity#"/> is divided.</param>
#/

#Define:RemainderScalarOperator(quantity, dimensionality)
/// <summary>Produces a <see cref="#Param:quantity#"/>, with each component equal to the remainder from division of the
/// magnitude of the component of <paramref name="a"/> by <paramref name="b"/>.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, the components of which are divided by <paramref name="b"/> to produce a remainder.</param>
/// <param name="b">The remainder is produced from division of <see cref="#Param:quantity#"/> <paramref name="a"/> by this value.</param>
#/

#Define:MultiplyScalarOperatorLHS(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> <paramref name="a"/> by <paramref name="b"/>.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is scaled by <paramref name="b"/>.</param>
/// <param name="b">This value is used to scale the <see cref="#Param:quantity#"/> <paramref name="a"/>.</param>
#/

#Define:MultiplyScalarOperatorRHS(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> <paramref name="a"/> by <paramref name="b"/>.</summary>
/// <param name="a">This value is used to scale the <see cref="#Param:quantity#"/> <paramref name="b"/>.</param>
/// <param name="b">The <see cref="#Param:quantity#"/>, which is scaled by <paramref name="a"/>.</param>
#/

#Define:DivideScalarOperator(quantity, dimensionality)
/// <summary>Scales the <see cref="#Param:quantity#"/> <paramref name="a"/> through division by <paramref name="b"/>.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is divided by <paramref name="b"/>.</param>
/// <param name="b">This value is used to divide the <see cref="#Param:quantity#"/> <paramref name="a"/>.</param>
#/

#Define:MultiplyGeneric(quantity, dimensionality)
/// <inheritdoc/>
/// <exception cref="ArgumentNullException"/>
#/

#Define:DivideGeneric(quantity, dimensionality)
/// <inheritdoc/>
/// <exception cref="ArgumentNullException"/>
#/

#Define:MultiplyIScalarLHS(quantity, dimensionality)
#Document:MultiplyIScalarLHS#Param:dimensionality#(#Param:quantity#)#
#/

#Define:MultiplyIScalarLHS3(quantity)
/// <summary>Multiplication of the <see cref="#Param:quantity#"/> <paramref name="a"/> by the quantity <paramref name="b"/>
/// - resulting in an <see cref="Unhandled3"/> quantity.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is multiplied by <paramref name="b"/>.</param>
/// <param name="b">This quantity is multiplied by the <see cref="#Param:quantity#"/> <paramref name="a"/>.</param>
/// <remarks>To avoid boxing, prefer <see cref="Multiply{TProductVector3Quantity, TFactorScalarQuantity}(TFactorScalarQuantity,
/// Func{double, double, double, TProductVector3Quantity})"/>.</remarks>
/// <exception cref="ArgumentNullException"/>
#/

#Define:MultiplyIScalarRHS(quantity, dimensionality)
#Document:MultiplyIScalarRHS#Param:dimensionality#(#Param:quantity#)#
#/

#Define:MultiplyIScalarRHS3(quantity)
/// <summary>Multiplication of the quantity <paramref name="a"/> by the <see cref="#Param:quantity#"/> <paramref name="b"/>
/// - resulting in an <see cref="Unhandled3"/> quantity.</summary>
/// <param name="a">This quantity is multiplied by the <see cref="#Param:quantity#"/> <paramref name="b"/>.</param>
/// <param name="b">The <see cref="#Param:quantity#"/>, which is multiplied by <paramref name="a"/>.</param>
/// <remarks>To avoid boxing, prefer <see cref="Multiply{TProductVector3Quantity, TFactorScalarQuantity}(TFactorScalarQuantity,
/// Func{double, double, double, TProductVector3Quantity})"/>.</remarks>
/// <exception cref="ArgumentNullException"/>
#/

#Define:DivideIScalar(quantity, dimensionality)
#Document:DivideIScalar#Param:dimensionality#(#Param:quantity#)#
#/

#Define:DivideIScalar3(quantity)
/// <summary>Division of the <see cref="#Param:quantity#"/> <paramref name="a"/> by the quantity <paramref name="b"/>
/// - resulting in an <see cref="Unhandled3"/> quantity.</summary>
/// <param name="a">The <see cref="#Param:quantity#"/>, which is divided by <paramref name="b"/>.</param>
/// <param name="b">The <see cref="#Param:quantity#"/> <paramref name="a"/> is divided by this quantity.</param>
/// <remarks>To avoid boxing, prefer <see cref="Divide{TQuotientVector3Quantity, TDivisorScalarQuantity}(TDivisorScalarQuantity,
/// Func{double, double, double, TQuotientVector3Quantity})"/>.</remarks>
/// <exception cref="ArgumentNullException"/>
#/

#Define:ToValueTupleMethod(quantity, dimensionality)
#Document:ToValueTupleMethod#Param:dimensionality#(#Param:quantity#)#
#/

#Define:ToValueTupleMethod3(quantity)
/// <summary>Converts the <see cref="#Param:quantity#"/> to a (<see langword="double"/>, <see langword="double"/>, <see langword="double"/>) with #newline#values (<see cref="X"/>, <see cref="Y"/>, <see cref="Z"/>), when expressed in SI units.</summary>
#/

#Define:ToValueTupleOperator(quantity, dimensionality)
#Document:ToValueTupleOperator#Param:dimensionality#(quantity)#
#/

#Define:ToValueTupleOperator3(quantity)
/// <summary>Converts <paramref name="a"/> to a (<see langword="double"/>, <see langword="double"/>, <see langword="double"/>) with #newline#values (<see cref="X"/>, <see cref="Y"/>, <see cref="Z"/>), when expressed in SI units.</summary>
#/

#Define:ToVectorMethod(quantity, dimensionality)
/// <summary>Converts the <see cref="#Param:quantity#"/> to the <see cref="Vector#Param:dimensionality#"/> with components of equal magnitude, #newline#when expressed in SI units.</summary>
#/

#Define:ToVectorOperator(quantity, dimensionality)
/// <summary>Converts <paramref name="a"/> to the <see cref="Vector#Param:dimensionality#"/> with components of equal magnitude, #newline#when expressed in SI units.</summary>
#/

#Define:FromValueTupleMethod(quantity, dimensionality)
/// <summary>Constructs the <see cref="#Param:quantity#"/> with components equal to the values of <paramref name="components"/>, #newline#when expressed in SI units.</summary>
#/

#Define:FromValueTupleOperator(quantity, dimensionality)
/// <summary>Constructs the <see cref="#Param:quantity#"/> with components equal to the values of <paramref name="components"/>, #newline#when expressed in SI units.</summary>
#/

#Define:FromVectorMethod(quantity, dimensionality)
/// <summary>Constructs the <see cref="#Param:quantity#"/> with components <paramref name="a"/>, #newline#when expressed in SI units.</summary>
#/

#Define:FromVectorOperator(quantity, dimensionality)
/// <summary>Constructs the <see cref="#Param:quantity#"/> with components <paramref name="a"/>, #newline#when expressed in SI units.</summary>
#/