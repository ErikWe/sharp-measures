#nullable enable

namespace ErikWe.SharpMeasures.Units;

using ErikWe.SharpMeasures.Quantities;

#Document:Header(#Unit#, #SIUnit#)#
public readonly record struct #Unit#
{
#Derived##NewlineIfDerived##NewlineIfDerived##Units#

#Constants#

    #Document:Scale(#Unit#, #SIUnit#, #UnbiasedQuantity#)#
    public #UnbiasedQuantity# #UnbiasedQuantity# { get; private init; }

    #Document:Offset(#Unit#, #SIUnit#)#
    public Scalar Offset { get; private init; }

    #Document:Constructor(#Unit#, #SIUnit#, #UnbiasedQuantity#, #unbiasedQuantity#)#
    private #Unit#(#UnbiasedQuantity# #unbiasedQuantity#, Scalar offset)
    {
        #UnbiasedQuantity# = #unbiasedQuantity#;
        Offset = offset;
    }

    #Document:WithPrefix(#Unit#, #SIUnit#)#
    public #Unit# WithPrefix(MetricPrefix prefix) => ScaledBy(prefix.Scale);
    #Document:ScaledBy(#Unit#, #SIUnit#)#
    public #Unit# ScaledBy(Scalar scale) => ScaledBy(scale.Magnitude);
    #Document:ScaledBy(#Unit#, #SIUnit#)#
    public #Unit# ScaledBy(double scale) => new(#UnbiasedQuantity# * scale, Offset / scale);
    #Document:OffsetBy(#Unit#, #SIUnit#)#
    public #Unit# OffsetBy(Scalar offset) => OffsetBy(offset.Magnitude);
    #Document:OffsetBy(#Unit#, #SIUnit#)#
    public #Unit# OffsetBy(double offset) => new(#UnbiasedQuantity#, Offset + offset);

    #Document:ToString(#Unit#, #SIUnit#, #Quantity#)#
    public override string ToString() => $"{GetType()}: {#UnbiasedQuantity#} + {Offset}";
}