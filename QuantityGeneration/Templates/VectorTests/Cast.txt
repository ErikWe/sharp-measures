#nullable enable

namespace ErikWe.SharpMeasures.Tests.Cases.QuantityTests.#Quantity##Dimensionality#Tests;

using ErikWe.SharpMeasures.Quantities;
using ErikWe.SharpMeasures.Tests.Datasets;

using Xunit;

public class CastTests
{
    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void ToTuple_ComponentsShouldMatch(#Quantity##Dimensionality# quantity)
    {
        (#ComponentListDouble#) result = quantity.ToValueTuple();

        Utility.AssertExtra.AssertEqualComponents(quantity, result);
    }

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void CastToTuple_ComponentsShouldMatch(#Quantity##Dimensionality# quantity)
    {
        (#ComponentListDouble#) result = ((#ComponentListUnnamedDoubles#))quantity;

        Utility.AssertExtra.AssertEqualComponents(quantity, result);
    }

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void ToVector#Dimensionality#_ComponentsShouldMatch(#Quantity##Dimensionality# quantity)
    {
        Vector#Dimensionality# result = quantity.ToVector#Dimensionality#();

        Utility.AssertExtra.AssertEqualComponents(quantity, result.ToValueTuple());
    }

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void CastToVector#Dimensionality#_ComponentsShouldMatch(#Quantity##Dimensionality# quantity)
    {
        Vector#Dimensionality# result = (Vector#Dimensionality#)quantity;

        Utility.AssertExtra.AssertEqualComponents(quantity, result.ToValueTuple());
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#ComponentListDoubleDatasets#>))]
    public void FromTuple_ComponentsShouldMatch(#ComponentListDouble#)
    {
        #Quantity##Dimensionality# result = #Quantity##Dimensionality#.FromValueTuple((#ComponentListLowerCaseName#));

        Utility.AssertExtra.AssertEqualComponents((#ComponentListLowerCaseName#), result);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#ComponentListDoubleDatasets#>))]
    public void CastFromTuple_ShouldMatchMagnitude(#ComponentListDouble#)
    {
        #Quantity##Dimensionality# result = (#Quantity##Dimensionality#)(#ComponentListLowerCaseName#);

        Utility.AssertExtra.AssertEqualComponents((#ComponentListLowerCaseName#), result);
    }

    [Theory]
    [ClassData(typeof(Vector#Dimensionality#Dataset))]
    public void FromVector#Dimensionality#_ShouldMatchMagnitude(Vector#Dimensionality# vector)
    {
        #Quantity##Dimensionality# result = #Quantity##Dimensionality#.FromVector#Dimensionality#(vector);

        Utility.AssertExtra.AssertEqualComponents(vector.ToValueTuple(), result);
    }

    [Theory]
    [ClassData(typeof(Vector#Dimensionality#Dataset))]
    public void CastFromVector#Dimensionality#_ShouldMatchMagnitude(Vector#Dimensionality# vector)
    {
        #Quantity##Dimensionality# result = (#Quantity##Dimensionality#)vector;

        Utility.AssertExtra.AssertEqualComponents(vector.ToValueTuple(), result);
    }
}
