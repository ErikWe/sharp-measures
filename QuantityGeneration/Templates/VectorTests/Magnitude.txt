#nullable enable

namespace ErikWe.SharpMeasures.Tests.Cases.QuantityTests.#Quantity##Dimensionality#Tests;

using ErikWe.SharpMeasures.Quantities;
using ErikWe.SharpMeasures.Tests.Datasets;

using System;

using Xunit;

public class MagnitudeTests
{
    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void Individual_MagnitudesShouldBeSameAsOriginal(#Quantity##Dimensionality# quantity)
    {
#AssertIndividual#
    }

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void Components_MagnitudesShouldBeEqual(#Quantity##Dimensionality# quantity)
    {
        Vector#Dimensionality# components = quantity.Components;

        Utility.AssertExtra.AssertEqualComponents(quantity, components.ToValueTuple());
    }

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void Magnitude_ShouldBeSquareRootOfSumOfSquares(#Quantity##Dimensionality# quantity)
    {
        #Component# magnitude = quantity.Magnitude();

        Assert.Equal(Math.Sqrt(#ComponentListSquareSum#), magnitude.Magnitude, 2);
    }

#HasSquaredComponent#
    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void SquaredMagnitude_ShouldBeSumOfSquares(#Quantity##Dimensionality# quantity)
    {
        #SquaredComponent# squaredMagnitude = quantity.SquaredMagnitude();

        Assert.Equal(#ComponentListSquareSum#, squaredMagnitude.Magnitude, 2);
    }
#/HasSquaredComponent#

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void Magnitude_Explicit_ShouldBeSquareRootOfSumOfSquares(#Quantity##Dimensionality# quantity)
    {
        Scalar magnitude = ((IVector#Dimensionality#Quantity)quantity).Magnitude();

        Assert.Equal(Math.Sqrt(#ComponentListSquareSum#), magnitude.Magnitude, 2);
    }

    [Theory]
    [ClassData(typeof(#Quantity##Dimensionality#Dataset))]
    public void SquaredMagnitude_Explicit_ShouldBeSumOfSquares(#Quantity##Dimensionality# quantity)
    {
        Scalar squaredMagnitude = ((IVector#Dimensionality#Quantity)quantity).SquaredMagnitude();

        Assert.Equal(#ComponentListSquareSum#, squaredMagnitude.Magnitude, 2);
    }
}
