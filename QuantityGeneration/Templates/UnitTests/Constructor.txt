#nullable enable

namespace ErikWe.SharpMeasures.Tests.Cases.UnitTests.#Unit#Tests;

using ErikWe.SharpMeasures.Quantities;
using ErikWe.SharpMeasures.Tests.Datasets;
using ErikWe.SharpMeasures.Units;

using Xunit;

public class ConstructorTests
{
#Unbiased#
    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, MetricPrefixDataset>))]
    public void WithPrefix_ShouldBeProductWithPrefix(#Unit# a, MetricPrefix prefix)
    {
        #Unit# result = a.WithPrefix(prefix);

        Assert.Equal(a.#Quantity#.Magnitude * prefix.Scale, result.#Quantity#.Magnitude, 2);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, ScalarDataset>))]
    public void ScaledBy_Scalar_ShouldBeProduct(#Unit# a, Scalar scalar)
    {
        #Unit# result = a.ScaledBy(scalar);

        Assert.Equal(a.#Quantity#.Magnitude * scalar.Magnitude, result.#Quantity#.Magnitude, 2);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, ScalarDataset>))]
    public void ScaledBy_Double_ShouldBeProduct(#Unit# a, double scalar)
    {
        #Unit# result = a.ScaledBy(scalar);

        Assert.Equal(a.#Quantity#.Magnitude * scalar, result.#Quantity#.Magnitude, 2);
    }
#/Unbiased#
#Biased#
    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, MetricPrefixDataset>))]
    public void WithPrefix_ShouldBeProductWithPrefix(#Unit# a, MetricPrefix prefix)
    {
        #Unit# result = a.WithPrefix(prefix);

        Assert.Equal(a.#UnbiasedQuantity#.Magnitude * prefix.Scale, result.#UnbiasedQuantity#.Magnitude, 2);
        Assert.Equal(a.Offset / prefix.Scale, result.Offset);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, ScalarDataset>))]
    public void ScaledBy_Scalar_ShouldBeProduct(#Unit# a, Scalar scalar)
    {
        #Unit# result = a.ScaledBy(scalar);

        Assert.Equal(a.#UnbiasedQuantity#.Magnitude * scalar.Magnitude, result.#UnbiasedQuantity#.Magnitude, 2);
        Assert.Equal(a.Offset / scalar, result.Offset.Magnitude, 2);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, DoubleDataset>))]
    public void ScaledBy_Double_ShouldBeProduct(#Unit# a, double scalar)
    {
        #Unit# result = a.ScaledBy(scalar);

        Assert.Equal(a.#UnbiasedQuantity#.Magnitude * scalar, result.#UnbiasedQuantity#.Magnitude, 2);
        Assert.Equal(a.Offset / scalar, result.Offset, 2);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, ScalarDataset>))]
    public void OffsetBy_Scalar_ShouldBeSum(#Unit# a, Scalar scalar)
    {
        #Unit# result = a.OffsetBy(scalar);

        Assert.Equal(a.#UnbiasedQuantity#.Magnitude, result.#UnbiasedQuantity#.Magnitude, 2);
        Assert.Equal(a.Offset + scalar, result.Offset, 2);
    }

    [Theory]
    [ClassData(typeof(GenericDataset<#Unit#Dataset, DoubleDataset>))]
    public void OffsetBy_Double_ShouldBeSum(#Unit# a, double scalar)
    {
        #Unit# result = a.OffsetBy(scalar);

        Assert.Equal(a.#UnbiasedQuantity#.Magnitude, result.#UnbiasedQuantity#.Magnitude, 2);
        Assert.Equal(a.Offset + scalar, result.Offset, 2);
    }
#/Biased#
}
