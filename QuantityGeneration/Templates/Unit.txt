#nullable enable

namespace ErikWe.SharpMeasures.Units;

using ErikWe.SharpMeasures.Quantities;

using System;

#Document:Header(#Unit#, #SIUnit#)#
public readonly record struct #Unit# :
    IComparable<#Unit#>
{
#Derived##NewlineIfDerived##NewlineIfDerived##Units#

#Constants#

    #Document:Quantity(#Unit#, #SIUnit#, #Quantity#)#
    public #Quantity# #Quantity# { get; private init; }

    #Document:Constructor(#Unit#, #SIUnit#, #Quantity#, #quantity#)#
    private #Unit#(#Quantity# #quantity#)
    {
        #Quantity# = #quantity#;
    }

    #Document:WithPrefix(#Unit#, #SIUnit#)#
    public #Unit# WithPrefix(MetricPrefix prefix) => new(#Quantity# * prefix.Scale);
    #Document:ScaledBy(#Unit#, #SIUnit#)#
    public #Unit# ScaledBy(Scalar scale) => new(#Quantity# * scale);
    #Document:ScaledBy(#Unit#, #SIUnit#)#
    public #Unit# ScaledBy(double scale) => new(#Quantity# * scale);

    #Document:CompareTo(#Unit#, #SIUnit#)#
    public int CompareTo(#Unit# other) => #Quantity#.CompareTo(other.#Quantity#);
    #Document:ToString(#Unit#, #SIUnit#, #Quantity#)#
    public override string ToString() => $"{GetType()}: {#Quantity#}";

    #Document:LessThan(#Unit#, #SIUnit#, #Quantity#)#
    public static bool operator <(#Unit# x, #Unit# y) => x.#Quantity# < y.#Quantity#;
    #Document:GreaterThan(#Unit#, #SIUnit#, #Quantity#)#
    public static bool operator >(#Unit# x, #Unit# y) => x.#Quantity# > y.#Quantity#;
    #Document:LessThanOrEqual(#Unit#, #SIUnit#, #Quantity#)#
    public static bool operator <=(#Unit# x, #Unit# y) => x.#Quantity# <= y.#Quantity#;
    #Document:GreaterThanOrEqual(#Unit#, #SIUnit#, #Quantity#)#
    public static bool operator >=(#Unit# x, #Unit# y) => x.#Quantity# >= y.#Quantity#;
}