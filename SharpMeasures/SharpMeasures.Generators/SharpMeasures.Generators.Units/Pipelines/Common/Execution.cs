namespace SharpMeasures.Generators.Units.Pipelines.Common;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;

using System.Collections.Generic;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(data);

        context.AddSource($"{data.Unit.Name}_Common.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(DataModel data)
        {
            Composer composer = new(data);
            composer.Compose();
            return composer.Retrieve();
        }

        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }

        private UsingsCollector UsingsCollector { get; }
        private InterfaceCollector InterfaceCollector { get; }

        private Composer(DataModel data)
        {
            Data = data;

            UsingsCollector = UsingsCollector.Delayed(Builder, Data.Unit.Namespace);
            InterfaceCollector = InterfaceCollector.Delayed(Builder);

            UsingsCollector.AddUsings("SharpMeasures", Data.Quantity.Namespace);

            if (Data.Biased is false)
            {
                UsingsCollector.AddUsings("System");
                InterfaceCollector.AddInterface($"IComparable<{Data.Unit.Name}>");
            }
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Unit.Namespace);

            List<string> usings = new(new[] { "SharpMeasures" });

            UsingsCollector.MarkInsertionPoint();

            AppendDocumentation(new Indentation(0), Data.Documentation.Header());
            Builder.Append(Data.Unit.ComposeDeclaration());

            InterfaceCollector.MarkInsertionPoint();

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);

            InterfaceCollector.InsertInterfaces();
            UsingsCollector.InsertUsings();
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            if (Data.Biased)
            {
                ComposeBiasedTypeBlock(indentation);
            }
            else
            {
                ComposeUnbiasedTypeBlock(indentation);
            }
        }

        private void ComposeUnbiasedTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, Data.Documentation.RepresentedQuantity());
            Builder.AppendLine($"{indentation}public {Data.Quantity.Name} {Data.Quantity.Name} {{ get; }}");

            AppendDocumentation(indentation, Data.Documentation.Constructor());
            BlockBuilding.AppendBlock(Builder,
                header: $"private {Data.Unit.Name}({Data.Quantity.Name} {Data.Quantity.ParameterName})",
                blockContentAppender: constructorBlock,
                originalIndentationLevel: indentation.Level);

            void constructorBlock(Indentation indentation)
            {
                Builder.Append($"{indentation}{Data.Quantity.Name} = {Data.Quantity.ParameterName};");
            }

            Builder.AppendLine();

            AppendDocumentation(indentation, Data.Documentation.ScaledBy());
            Builder.AppendLine($"{indentation}public {Data.Unit.Name} ScaledBy(Scalar scale) => ScaledBy(scale.Value);");

            Builder.AppendLine();

            AppendDocumentation(indentation, Data.Documentation.WithPrefix());
            Builder.AppendLine($"{indentation}public {Data.Unit.Name} WithPrefix(IPrefix prefix) => ScaledBy(prefix.Factor);");

            Builder.AppendLine();

            AppendDocumentation(indentation, Data.Documentation.ToStringDocumentation());
            Builder.AppendLine($@"{indentation}public override string ToString() => $""{{typeof({Data.Unit.Name})}}: [{{{Data.Quantity.Name}}}]"";");

            Builder.AppendLine();

            AppendDocumentation(indentation, Data.Documentation.CompareToSameType());
            Builder.AppendLine($"{indentation}public int CompareTo({Data.Unit.Name} other) " +
                $"=> {Data.Quantity.Name}.Magnitude.Value.CompareTo(other.{Data.Quantity.Name}.Magnitude.Value);");

            Builder.AppendLine();

            AppendDocumentation(indentation, Data.Documentation.LessThanSameType());
            Builder.AppendLine($"{indentation}public static bool operator <({Data.Unit.Name} x, {Data.Unit.Name} y) " +
                $"=> x.{Data.Quantity.Name}.Magnitude.Value < y.{Data.Quantity.Name}.Magnitude.Value;");
            AppendDocumentation(indentation, Data.Documentation.GreaterThanSameType());
            Builder.AppendLine($"{indentation}public static bool operator >({Data.Unit.Name} x, {Data.Unit.Name} y) " +
                $"=> x.{Data.Quantity.Name}.Magnitude.Value > y.{Data.Quantity.Name}.Magnitude.Value;");
            AppendDocumentation(indentation, Data.Documentation.LessThanOrEqualSameType());
            Builder.AppendLine($"{indentation}public static bool operator <=({Data.Unit.Name} x, {Data.Unit.Name} y) " +
                $"=> x.{Data.Quantity.Name}.Magnitude.Value <= y.{Data.Quantity.Name}.Magnitude.Value;");
            AppendDocumentation(indentation, Data.Documentation.GreaterThanOrEqualSameType());
            Builder.AppendLine($"{indentation}public static bool operator >=({Data.Unit.Name} x, {Data.Unit.Name} y) " +
                $"=> x.{Data.Quantity.Name}.Magnitude.Value >= y.{Data.Quantity.Name}.Magnitude.Value;");
        }

        private void ComposeBiasedTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, Data.Documentation.RepresentedQuantity());
            Builder.AppendLine($"{indentation}public {Data.Quantity.Name} {Data.Quantity.Name} {{ get; }}");
            AppendDocumentation(indentation, Data.Documentation.Offset());
            Builder.AppendLine($"{indentation}public Scalar Offset {{ get; }}");

            AppendDocumentation(indentation, Data.Documentation.Constructor());
            BlockBuilding.AppendBlock
            (
                source: Builder,
                header: $"private {Data.Unit.Name}({Data.Quantity.Name} {Data.Quantity.ParameterName}, Scalar offset)",
                blockContentAppender: constructorBlock,
                originalIndentationLevel: indentation.Level
            );

            void constructorBlock(Indentation indentation)
            {
                Builder.AppendLine($"{indentation}{Data.Quantity.Name} = {Data.Quantity.ParameterName};");
                Builder.AppendLine($"{indentation}Offset = offset;");
            }

            Builder.AppendLine();
            AppendDocumentation(indentation, Data.Documentation.ScaledBy());
            Builder.AppendLine($"{indentation}public {Data.Unit.Name} ScaledBy(Scalar scale) => ScaledBy(scale.Value);");

            Builder.AppendLine();
            AppendDocumentation(indentation, Data.Documentation.OffsetBy());
            Builder.AppendLine($"{indentation}public {Data.Unit.Name} OffsetBy(Scalar offset) => OffsetBy(offset.Value);");

            Builder.AppendLine();
            AppendDocumentation(indentation, Data.Documentation.WithPrefix());
            Builder.AppendLine($"{indentation}public {Data.Unit.Name} WithPrefix(IPrefix prefix) => ScaledBy(prefix.Factor);");

            Builder.AppendLine();
            AppendDocumentation(indentation, Data.Documentation.ToStringDocumentation());
            Builder.AppendLine($"{indentation}public override string ToString() => \"{{typeof({Data.Unit.Name})}}: ({{{Data.Quantity.Name}}} + {{Offset}})\";");
        }

        private void AppendDocumentation(Indentation indentation, string text)
        {
            DocumentationBuilding.AppendDocumentation(Builder, indentation, text);
        }
    }
}
