namespace SharpMeasures.Generators.Vectors.Pipelines.DimensionalEquivalence;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.Quantities.Utility;
using SharpMeasures.Generators.SourceBuilding;

using System;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(context, data);

        context.AddSource($"{data.Vector.Name}_{data.Dimension}_DimensionalEquivalence.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }
        private UsingsCollector UsingsCollector { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;

            UsingsCollector = UsingsCollector.Delayed(Builder, Data.Vector.Namespace);
            UsingsCollector.AddUsing("SharpMeasures");
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Vector.Namespace);

            UsingsCollector.MarkInsertionPoint();

            AppendDocumentation(new Indentation(0), VectorDocumentationTags.VectorHeader);
            Builder.AppendLine(Data.Vector.ComposeDeclaration());

            InterfaceBuilding.AppendInterfaceImplementation(Builder, new string[]
            {
                $"IVector{Data.Dimension}"
            });

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);

            UsingsCollector.InsertUsings();
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            foreach (var dimensionallyEquivalentVectorGroup in Data.DimensionalEquivalences)
            {
                if (dimensionallyEquivalentVectorGroup.Key.VectorsByDimension.TryGetValue(Data.Dimension, out var dimensionallyEquivalentVector))
                {
                    ComposeInstanceConversion(dimensionallyEquivalentVector, indentation);
                }
            }

            foreach (var dimensionallyEquivalentVectorGroup in Data.DimensionalEquivalences)
            {
                if (dimensionallyEquivalentVectorGroup.Value is ConversionOperationBehaviour.None)
                {
                    continue;
                }

                Action<ResizedVectorInterface, Indentation> composer = dimensionallyEquivalentVectorGroup.Value switch
                {
                    ConversionOperationBehaviour.Explicit => ComposeExplicitOperatorConversion,
                    ConversionOperationBehaviour.Implicit => ComposeImplicitOperatorConversion,
                    _ => throw new NotSupportedException("Invalid cast operation")
                };

                if (dimensionallyEquivalentVectorGroup.Key.VectorsByDimension.TryGetValue(Data.Dimension, out var dimensionallyEquivalentVector))
                {
                    composer(dimensionallyEquivalentVector, indentation);
                }
            }
        }

        private void ComposeInstanceConversion(ResizedVectorInterface vector, Indentation indentation)
        {
            UsingsCollector.AddUsing(vector.VectorType.Namespace);

            AppendDocumentation(indentation, VectorDocumentationTags.DimensionallyEquivalentTo(vector.VectorType.Name));
            Builder.AppendLine($"{indentation}public {vector.VectorType.Name} As{vector.VectorType.Name} => new(Components);");
        }

        private void ComposeExplicitOperatorConversion(ResizedVectorInterface vector, Indentation indentation)
            => ComposeOperatorConversion(vector, indentation, "explicit");

        private void ComposeImplicitOperatorConversion(ResizedVectorInterface vector, Indentation indentation)
            => ComposeOperatorConversion(vector, indentation, "implicit");

        private void ComposeOperatorConversion(ResizedVectorInterface vector, Indentation indentation, string behaviour)
        {
            AppendDocumentation(indentation, VectorDocumentationTags.Operators.DimensionallyEquivalentTo(vector.VectorType.Name));
            Builder.AppendLine($"{indentation}public static {behaviour} operator {vector.VectorType.Name}({Data.Vector.Name} x) => new(x.Components);");
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }
    }
}
