namespace SharpMeasures.Generators.Units.Pipeline.MiscPipeline;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;

using System;
using System.Text;
using System.Threading;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, Stage4.Result result)
    {
        string source = Compose(result, context.CancellationToken);

        context.AddSource($"{result.TypeDefinition.Name.Name}_Misc.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private static string Compose(Stage4.Result data, CancellationToken _)
    {
        StringBuilder source = new();

        string unitName = data.TypeDefinition.Name.Name;
        string quantityName = data.Quantity.Name;
        string quantityParameterName = SourceBuildingUtility.ToParameterName(quantityName);
        string quantityType = data.Quantity.FullyQualifiedName;

        Names names = new(unitName, quantityName, quantityParameterName, quantityType);

        StaticBuilding.AppendAutoGeneratedHeader(source);
        StaticBuilding.AppendNullableDirective(source);

        NamespaceBuilding.AppendNamespace(source, data.TypeDefinition.Name.NameSpace);

        source.Append(data.TypeDefinition.ComposeDeclaration());

        BlockBuilding.AppendBlock(source, typeBlock, originalIndentationLevel: 0);

        void typeBlock(StringBuilder source, Indentation indentation)
        {
            if (data.Biased)
            {
                ComposeBiased(source, indentation, names);
            }
            else
            {
                ComposeUnbiased(source, indentation, names);
            }
        }

        return source.ToString();
    }

    private static void ComposeUnbiased(StringBuilder source, Indentation indentation, Names names)
    {
        source.Append($"{indentation}public {names.QuantityType} {names.Quantity} {{ get; }}{Environment.NewLine}");
        source.Append(Environment.NewLine);

        BlockBuilding.AppendBlock(source,
            header: $"private {names.Unit}({names.QuantityType} {names.QuantityParameter})",
            blockContentAppender: constructorBlock,
            originalIndentationLevel: indentation.Level + 1);

        void constructorBlock(StringBuilder source, Indentation indentation)
        {
            source.Append($"{indentation}{names.Quantity} = {names.QuantityParameter};");
        }

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public {names.Unit} ScaledBy(SharpMeasures.Scalar scale) => ScaledBy(scale.Magnitude);{Environment.NewLine}");
        source.Append($"{indentation}public {names.Unit} ScaledBy(double scale) => new({names.Quantity} * scale);{Environment.NewLine}");

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public {names.Unit} WithPrefix(SharpMeasures.MetricPrefix prefix) => ScaledBy(prefix.Scale);{Environment.NewLine}");

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public override string ToString() => $\"{{typeof({names.Unit})}}: {{{names.Quantity}}}\";{Environment.NewLine}");
    }

    private static void ComposeBiased(StringBuilder source, Indentation indentation, Names names)
    {
        source.Append($"{indentation}public {names.QuantityType} {names.Quantity} {{ get; }}{Environment.NewLine}");
        source.Append($"{indentation}public Scalar Offset {{ get; }}{Environment.NewLine}");
        source.Append(Environment.NewLine);

        BlockBuilding.AppendBlock(source,
            header: $"private {names.Unit}({names.QuantityType} {names.QuantityParameter}, Scalar offset)",
            blockContentAppender: constructorBlock,
            originalIndentationLevel: indentation.Level + 1);

        void constructorBlock(StringBuilder source, Indentation indentation)
        {
            source.Append($"{indentation}{names.Quantity} = {names.QuantityParameter};{Environment.NewLine}");
            source.Append($"Offset = offset;");
        }

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public {names.Unit} ScaledBy(SharpMeasures.Scalar scale) => ScaledBy(scale.Magnitude);{Environment.NewLine}");
        source.Append($"{indentation}public {names.Unit} ScaledBy(double scale) => new({names.Quantity} * scale, Offset / scale);{Environment.NewLine}");

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public {names.Unit} OffsetBy(SharpMeasures.Scalar offset) => OffsetBy(offset.Magnitude);{Environment.NewLine}");
        source.Append($"{indentation}public {names.Unit} OffsetBy(double offset) => new({names.Quantity}, Offset + offset);{Environment.NewLine}");

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public {names.Unit} WithPrefix(SharpMeasures.MetricPrefix prefix) => ScaledBy(prefix.Scale);{Environment.NewLine}");

        source.Append(Environment.NewLine);
        source.Append($"{indentation}public override string ToString() => $\"{{typeof({names.Unit})}}: ({{{names.Quantity}}} + {{Offset}})\";{Environment.NewLine}");
    }

    private readonly record struct Names(string Unit, string Quantity, string QuantityParameter, string QuantityType);
}
