namespace SharpMeasures.Generators.Units.Pipeline.DefinitionsPipeline;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.Attributes.Parsing.Units;
using SharpMeasures.Generators.Attributes.Parsing.Units.Caching;
using SharpMeasures.Generators.SourceBuilding;
using SharpMeasures.Generators.Utility;

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, Stage4.Result result)
    {
        string source = Compose(result, context.CancellationToken);

        context.AddSource($"{result.TypeDefinition.Name.Name}_Definitions.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private static string Compose(Stage4.Result data, CancellationToken _)
    {
        StringBuilder source = new();

        string unitName = data.TypeDefinition.Name.Name;

        StaticBuilding.AppendAutoGeneratedHeader(source);
        StaticBuilding.AppendNullableDirective(source);

        NamespaceBuilding.AppendNamespace(source, data.TypeDefinition.Name.NameSpace);

        source.Append(data.TypeDefinition.ComposeDeclaration());

        BlockBuilding.AppendBlock(source, typeBlock, originalIndentationLevel: 0);

        void typeBlock(StringBuilder source, Indentation indentation)
        {
            List<string> definedInstances = new();

            AppendDerived(source, indentation, data.TypeDefinition.Name, data.DerivedUnits, definedInstances);
            AppendFixed(source, indentation, data.TypeDefinition.Name, data.Quantity, data.Biased, data.FixedUnits, definedInstances);
            AppendAliases(source, indentation, data.TypeDefinition.Name, data.UnitAliases, definedInstances);

            IList<IDerivedUnitAttributeParameters> dependantInstances
                = GetDependantInstances(data.ScaledUnits, data.PrefixedUnits, data.OffsetUnits);
        }

        return source.ToString();
    }

    private static void AppendDerived(StringBuilder source, Indentation indentation, NamedType unitName,
        IEnumerable<CachedDerivedUnitAttributeParameters> derivedInstances, IList<string> definedInstances)
    {
        int initialLength = source.Length;

        foreach (CachedDerivedUnitAttributeParameters derivedInstance in derivedInstances)
        {
            definedInstances.Add(derivedInstance.Name);

            source.Append($"{indentation}public static {unitName.Name} {derivedInstance.Name} {{ get; }} = ");

            IterativeBuilding.AppendEnumerable(source, "From(", arguments(), ", ", $");{Environment.NewLine}");

            IEnumerable<string> arguments()
            {
                IEnumerator<string?> signatureIterator = derivedInstance.Signature.GetEnumerator();
                IEnumerator<string> unitIterator = derivedInstance.UnitInstanceNames.GetEnumerator();

                while (signatureIterator.MoveNext() && unitIterator.MoveNext())
                {
                    yield return $"{signatureIterator.Current}.{unitIterator.Current}";
                }
            }
        }

        if (source.Length > initialLength)
        {
            source.Append(Environment.NewLine);
        }
    }

    private static void AppendFixed(StringBuilder source, Indentation indentation, NamedType unitName, NamedType quantityName, bool biased,
        IEnumerable<FixedUnitAttributeParameters> fixedUnits, IList<string> definedInstances)
    {
        int initialLength = source.Length;

        Action<FixedUnitAttributeParameters> appender = biased ? appendBiased : appendUnbiased;

        foreach (FixedUnitAttributeParameters fixedUnit in fixedUnits)
        {
            definedInstances.Add(fixedUnit.Name);

            appender(fixedUnit);
        }

        if (source.Length > initialLength)
        {
            source.Append(Environment.NewLine);
        }

        void appendDeclaration(FixedUnitAttributeParameters fixedUnit)
        {
            source.Append($"{indentation}public static {unitName.Name} {fixedUnit.Name} {{ get; }}");
        }

        void appendUnbiased(FixedUnitAttributeParameters fixedUnit)
        {
            appendDeclaration(fixedUnit);
            source.Append($" = new(new {quantityName.FullyQualifiedName}({fixedUnit.Value}));{Environment.NewLine}");
        }

        void appendBiased(FixedUnitAttributeParameters fixedUnit)
        {
            appendDeclaration(fixedUnit);
            source.Append($" = new(new {quantityName.FullyQualifiedName}({fixedUnit.Value}), new SharpMeasures.Scalar({fixedUnit.Bias});{Environment.NewLine}");
        }
    }

    private static void AppendAliases(StringBuilder source, Indentation indentation, NamedType unitName, IEnumerable<UnitAliasAttributeParameters> unitAliases,
        IList<string> definedInstances)
    {
        int initialLength = source.Length;

        foreach (UnitAliasAttributeParameters unitAlias in unitAliases)
        {
            definedInstances.Add(unitAlias.Name);

            source.Append($"{indentation}public static {unitName.Name} {unitAlias.Name} => {unitAlias.AliasOf};{Environment.NewLine}");
        }

        if (source.Length > initialLength)
        {
            source.Append(Environment.NewLine);
        }
    }

    private static IList<IDerivedUnitAttributeParameters> GetDependantInstances(IEnumerable<ScaledUnitAttributeParameters> scaledUnits,
        IEnumerable<PrefixedUnitAttributeParameters> prefixedUnits, IEnumerable<OffsetUnitAttributeParameters> offsetUnits)
    {
        List<IDerivedUnitAttributeParameters> result = new();

        foreach (ScaledUnitAttributeParameters scaledUnit in scaledUnits)
        {
            result.Add(scaledUnit);
        }

        foreach (PrefixedUnitAttributeParameters prefixedUnit in prefixedUnits)
        {
            result.Add(prefixedUnit);
        }

        foreach (OffsetUnitAttributeParameters offsetUnit in offsetUnits)
        {
            result.Add(offsetUnit);
        }

        return result;
    }

    private static void AppendDependantInstances(StringBuilder source, string indentation, NamedType unitName,
        IList<IDerivedUnitAttributeParameters> dependantUnits, IList<string> definedInstances)
    {
        int initialLength = dependantUnits.Count;

        for (int i = 0; i < dependantUnits.Count; i++)
        {
            if (definedInstances.Contains(dependantUnits[i].DerivedFrom))
            {
                source.Append($"{indentation}public static {unitName.Name} {dependantUnits[i].Name} {{ get; }} = ");

                if (dependantUnits[i] is ScaledUnitAttributeParameters scaledInstance)
                {
                    AppendScaled(source, scaledInstance);
                }
                else if (dependantUnits[i] is PrefixedUnitAttributeParameters prefixedInstance)
                {
                    AppendPrefixed(source, prefixedInstance);
                }
                else if (dependantUnits[i] is OffsetUnitAttributeParameters offsetInstance)
                {
                    AppendOffset(source, offsetInstance);
                }

                source.Append($";{Environment.NewLine}");
             
                definedInstances.Add(dependantUnits[i].Name);
                dependantUnits.RemoveAt(i);
                i--;
            }
        }

        if (dependantUnits.Count < initialLength)
        {
            AppendDependantInstances(source, indentation, unitName, dependantUnits, definedInstances);
        }
    }

    private static void AppendScaled(StringBuilder source, ScaledUnitAttributeParameters scaledUnit)
    {
        source.Append($"{scaledUnit.From}.ScaledBy({scaledUnit.Scale})");
    }

    private static void AppendPrefixed(StringBuilder source, PrefixedUnitAttributeParameters prefixedUnit)
    {
        source.Append($"{prefixedUnit.From}.WithPrefix(SharpMeasures.MetricPrefix.{prefixedUnit.Prefix})");
    }

    private static void AppendOffset(StringBuilder source, OffsetUnitAttributeParameters offsetUnit)
    {
        source.Append($"{offsetUnit.From}.ScaledBy({offsetUnit.Offset})");
    }
}
