namespace SharpMeasures.Generators.Units.Pipelines.Misc;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;

using System;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(context, data);

        context.AddSource($"{data.Unit.Name}_Misc.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Unit.Namespace);

            UsingsBuilding.AppendUsings(Builder, Data.Unit.Namespace, new string[]
            {
                "SharpMeasures",
                Data.Quantity.Namespace
            });

            AppendDocumentation(new Indentation(0), UnitDocumentationTags.UnitHeader);
            Builder.Append(Data.Unit.ComposeDeclaration());

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            if (Data.Biased)
            {
                ComposeBiasedTypeBlock(indentation);
            }
            else
            {
                ComposeUnbiasedTypeBlock(indentation);
            }
        }

        private void ComposeUnbiasedTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, UnitDocumentationTags.Quantity);
            Builder.Append($"{indentation}public {Data.Quantity.Name} {Data.Quantity.Name} {{ get; }}{Environment.NewLine}");

            AppendDocumentation(indentation, UnitDocumentationTags.Constructor);
            BlockBuilding.AppendBlock(Builder,
                header: $"private {Data.Unit.Name}({Data.Quantity.Name} {Data.Quantity.ParameterName})",
                blockContentAppender: constructorBlock,
                originalIndentationLevel: indentation.Level);

            void constructorBlock(Indentation indentation)
            {
                Builder.Append($"{indentation}{Data.Quantity.Name} = {Data.Quantity.ParameterName};");
            }

            Builder.AppendLine();

            AppendDocumentation(indentation, UnitDocumentationTags.ScaledBy_Scalar);
            Builder.Append($"{indentation}public {Data.Unit.Name} ScaledBy(Scalar scale) => ScaledBy(scale.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, UnitDocumentationTags.ScaledBy_Double);
            Builder.Append($"{indentation}public {Data.Unit.Name} ScaledBy(double scale) => new({Data.Quantity.Name} * scale);{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, UnitDocumentationTags.WithPrefix_Metric);
            Builder.Append($"{indentation}public {Data.Unit.Name} WithPrefix(MetricPrefix prefix) => ScaledBy(prefix.Factor);{Environment.NewLine}");
            AppendDocumentation(indentation, UnitDocumentationTags.WithPrefix_Binary);
            Builder.Append($"{indentation}public {Data.Unit.Name} WithPrefix(BinaryPrefix prefix) => ScaledBy(prefix.Factor);{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, UnitDocumentationTags.ToString);
            Builder.Append($@"{indentation}public override string ToString() => $""{{typeof({Data.Unit.Name})}}: [{{{Data.Quantity.Name}}}]"";{Environment.NewLine}");
        }

        private void ComposeBiasedTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, UnitDocumentationTags.Quantity);
            Builder.Append($"{indentation}public {Data.Quantity.Name} {Data.Quantity.Name} {{ get; }}{Environment.NewLine}");
            AppendDocumentation(indentation, UnitDocumentationTags.Offset);
            Builder.Append($"{indentation}public Scalar Offset {{ get; }}{Environment.NewLine}");

            AppendDocumentation(indentation, UnitDocumentationTags.Constructor);
            BlockBuilding.AppendBlock
            (
                source: Builder,
                header: $"private {Data.Unit.Name}({Data.Quantity.Name} {Data.Quantity.ParameterName}, Scalar offset)",
                blockContentAppender: constructorBlock,
                originalIndentationLevel: indentation.Level
            );

            void constructorBlock(Indentation indentation)
            {
                Builder.Append($"{indentation}{Data.Quantity.Name} = {Data.Quantity.ParameterName};{Environment.NewLine}");
                Builder.Append($"{indentation}Offset = offset;");
            }

            Builder.AppendLine();
            AppendDocumentation(indentation, UnitDocumentationTags.ScaledBy_Scalar);
            Builder.Append($"{indentation}public {Data.Unit.Name} ScaledBy(Scalar scale) => ScaledBy(scale.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, UnitDocumentationTags.ScaledBy_Double);
            Builder.Append($"{indentation}public {Data.Unit.Name} ScaledBy(double scale) => new({Data.Quantity.Name} * scale, Offset / scale);{Environment.NewLine}");

            Builder.AppendLine();
            AppendDocumentation(indentation, UnitDocumentationTags.OffsetBy_Scalar);
            Builder.Append($"{indentation}public {Data.Unit.Name} OffsetBy(Scalar offset) => OffsetBy(offset.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, UnitDocumentationTags.OffsetBy_Double);
            Builder.Append($"{indentation}public {Data.Unit.Name} OffsetBy(double offset) => new({Data.Quantity.Name}, Offset + offset);{Environment.NewLine}");

            Builder.AppendLine();
            AppendDocumentation(indentation, UnitDocumentationTags.WithPrefix_Metric);
            Builder.Append($"{indentation}public {Data.Unit.Name} WithPrefix(MetricPrefix prefix) => ScaledBy(prefix.Factor);{Environment.NewLine}");
            AppendDocumentation(indentation, UnitDocumentationTags.WithPrefix_Binary);
            Builder.Append($"{indentation}public {Data.Unit.Name} WithPrefix(BinaryPrefix prefix) => ScaledBy(prefix.Factor);{Environment.NewLine}");

            Builder.AppendLine();
            AppendDocumentation(indentation, UnitDocumentationTags.ToString);
            Builder.Append($"{indentation}public override string ToString() " +
                $@"=> $""{{typeof({Data.Unit.Name})}}: ({{{Data.Quantity.Name}}} + {{Offset}})"";{Environment.NewLine}");
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }
    }
}
