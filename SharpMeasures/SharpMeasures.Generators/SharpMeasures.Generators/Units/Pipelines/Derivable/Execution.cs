namespace SharpMeasures.Generators.Units.Pipelines.Derivable;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;
using SharpMeasures.Generators.Units.Processing;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        if (data.Derivations.Any() is false)
        {
            return;
        }

        string source = Composer.ComposeAndReportDiagnostics(context, data);

        context.AddSource($"{data.Unit.Name}_Derivable.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string ComposeAndReportDiagnostics(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();
        private UsingsCollector UsingsCollector { get; }

        private DataModel Data { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;
            UsingsCollector = UsingsCollector.Delayed(Builder, data.Unit.Namespace);
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            UsingsCollector.MarkInsertionPoint();

            NamespaceBuilding.AppendNamespace(Builder, Data.Unit);

            Builder.Append(Data.Unit.ComposeDeclaration());

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);

            UsingsCollector.InsertUsings();
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            foreach (ProcessedDerivableUnit definition in Data.Derivations)
            {
                ComposeDefinition(definition, indentation);
            }
        }

        private void ComposeDefinition(ProcessedDerivableUnit definition, Indentation indentation)
        {
            IEnumerable<string> signatureComponents = GetSignatureComponents(definition);

            string documentationTag = GetDocumentationTagForSignature(signatureComponents);

            AppendDocumentation(indentation, UnitDocumentationTags.Derivable.WithSignature(documentationTag));
            Builder.Append($"{indentation}public static {Data.Unit.Name} From(");
            IterativeBuilding.AppendEnumerable(Builder, signatureComponents, ", ");
            Builder.AppendLine($") => new({definition.Expression});");
        }

        private IEnumerable<string> GetSignatureComponents(ProcessedDerivableUnit definition)
        {
            IEnumerator<NamedType> signatureIterator = definition.Signature.Types.GetEnumerator();
            IEnumerator<string> parameterIterator = definition.ParameterNames.GetEnumerator();

            while (parameterIterator.MoveNext() && signatureIterator.MoveNext())
            {
                UsingsCollector.AddUsing(signatureIterator.Current.Namespace);
                yield return $"{signatureIterator.Current.Name} {parameterIterator.Current}";
            }
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }

        private static string GetDocumentationTagForSignature(IEnumerable<string> signature)
        {
            StringBuilder tag = new();

            IterativeBuilding.AppendEnumerable(tag, signature, "_");

            return tag.ToString();
        }
    }
}
