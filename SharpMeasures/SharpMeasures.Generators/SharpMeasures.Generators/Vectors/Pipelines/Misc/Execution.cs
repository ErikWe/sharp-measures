namespace SharpMeasures.Generators.Vectors.Pipelines.Misc;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;

using System;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(context, data);

        context.AddSource($"{data.Vector.Name}_{data.Dimension}_Misc.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }
        private UsingsCollector UsingsCollector { get; }

        private VectorTexts ComponentTypeTupleElements_UpperCased { get; }
        private VectorTexts ComponentTypeTupleElements_LowerCased { get; }
        private VectorTexts NewComponentType_LowerCased { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;

            ComponentTypeTupleElements_UpperCased = VectorTexts.CommaSeparatedElements_UpperCased(Data.Scalar is null ? "Scalar" : Data.Scalar.Value.Name);
            ComponentTypeTupleElements_LowerCased = VectorTexts.CommaSeparatedElements_LowerCased(Data.Scalar is null ? "Scalar" : Data.Scalar.Value.Name);
            NewComponentType_LowerCased = Texts.NewComponentType_LowerCased(Data.Scalar is null ? "Scalar" : Data.Scalar.Value.Name);

            UsingsCollector = UsingsCollector.Delayed(Builder, Data.Vector.Namespace);
            UsingsCollector.AddUsings("SharpMeasures", Data.Unit.Namespace);

            if (Data.Scalar is not null)
            {
                UsingsCollector.AddUsing(Data.Scalar.Value.Namespace);
            }
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Vector.Namespace);

            UsingsCollector.MarkInsertionPoint();

            AppendDocumentation(new Indentation(0), VectorDocumentationTags.VectorHeader);
            Builder.Append(Data.Vector.ComposeDeclaration());

            InterfaceBuilding.AppendInterfaceImplementation(Builder, new string[]
            {
                $"IVector{Data.Dimension}"
            });

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);

            UsingsCollector.InsertUsings();
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, VectorDocumentationTags.Zero);
            Builder.Append($"{indentation}public static {Data.Vector.Name} Zero {{ get; }} = new({Texts.Zeros.GetText(Data.Dimension)});{Environment.NewLine}");

            Builder.AppendLine();

            ComposeComponents(indentation);

            Builder.AppendLine();

            ComposeConstructors(indentation);

            // TODO: for SquaredMagnitude(), we could gain access to the square of the component through ScalarInterface.
        }

        private void ComposeComponents(Indentation indentation)
        {
            if (Data.Scalar is null)
            {
                ComposeComponentsAsScalars(indentation);
            }
            else
            {
                ComposeComponentsAsTypes(indentation, Data.Scalar.Value);
            }
        }

        private void ComposeConstructors(Indentation indentation)
        {
            if (Data.Scalar is null)
            {
                ComposeConstructorsToScalars(indentation);
            }
            else
            {
                ComposeConstructorsToTypes(indentation);
            }

            Builder.AppendLine();
            ComposeCommonConstructors(indentation);
        }

        private void ComposeComponentsAsScalars(Indentation indentation)
        {
            for (int i = 0; i < Data.Dimension; i++)
            {
                AppendDocumentation(indentation, VectorDocumentationTags.Component(i, Data.Dimension));
                Builder.Append($"{indentation}public Scalar {VectorTexts.GetUpperCasedComponentName(i, Data.Dimension)} {{ get; }}{Environment.NewLine}");
            }

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Components);
            Builder.Append($"{indentation}public Vector{Data.Dimension} Components => new({VectorTexts.CommaSeparatedNames_UpperCased.GetText(Data.Dimension)});{Environment.NewLine}");
        }

        private void ComposeComponentsAsTypes(Indentation indentation, NamedType scalar)
        {
            for (int i = 0; i < Data.Dimension; i++)
            {
                AppendDocumentation(indentation, VectorDocumentationTags.Component(i, Data.Dimension));
                Builder.Append($"{indentation}public {scalar.Name} {VectorTexts.GetUpperCasedComponentName(i, Data.Dimension)} {{ get; }}{Environment.NewLine}");
            }

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Components);
            Builder.Append($"{indentation}public Vector{Data.Dimension} Components => new({VectorTexts.CommaSeparatedNames_UpperCased.GetText(Data.Dimension)});{Environment.NewLine}");

            Builder.AppendLine();

            for (int i = 0; i < Data.Dimension; i++)
            {
                Builder.Append($"{indentation}/// <inheritdoc/>{Environment.NewLine}");
                Builder.Append($"{indentation}Scalar IVector{Data.Dimension}.{VectorTexts.GetUpperCasedComponentName(i, Data.Dimension)}Magnitude => {VectorTexts.GetUpperCasedComponentName(i, Data.Dimension)}.Magnitude;{Environment.NewLine}");
            }
        }

        private void ComposeConstructorsToScalars(Indentation indentation)
        {
            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Scalars);
            Builder.Append($"{indentation}public {Data.Vector.Name}({Texts.ScalarTupleElements_LowerCased.GetText(Data.Dimension)}){Environment.NewLine}");
            BlockBuilding.AppendBlock(Builder, ComposeConstructorBlock, indentation);
        }

        private void ComposeConstructorsToTypes(Indentation indentation)
        {
            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Components);
            Builder.Append($"{indentation}public {Data.Vector.Name}({ComponentTypeTupleElements_LowerCased.GetText(Data.Dimension)}){Environment.NewLine}");
            BlockBuilding.AppendBlock(Builder, ComposeConstructorBlock, indentation);

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_ComponentTuple);
            Builder.Append($"{indentation}public {Data.Vector.Name}(({ComponentTypeTupleElements_UpperCased.GetText(Data.Dimension)}) components){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({VectorTexts.ComponentTupleAccess_UpperCased.GetText(Data.Dimension)}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Scalars);
            Builder.Append($"{indentation}public {Data.Vector.Name}({Texts.ScalarTupleElements_LowerCased.GetText(Data.Dimension)}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({NewComponentType_LowerCased.GetText(Data.Dimension)}) {{ }}{Environment.NewLine}");
        }

        private void ComposeConstructorBlock(Indentation indentation)
        {
            for (int i = 0; i < Data.Dimension; i++)
            {
                Builder.Append($"{indentation}{VectorTexts.GetUpperCasedComponentName(i, Data.Dimension)} = {VectorTexts.GetLowerCasedComponentName(i, Data.Dimension)};{Environment.NewLine}");
            }
        }

        private void ComposeCommonConstructors(Indentation indentation)
        {
            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_ScalarTuple);
            Builder.Append($"{indentation}public {Data.Vector.Name}(({Texts.ScalarTupleElements_UpperCased.GetText(Data.Dimension)}) components){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({VectorTexts.ComponentTupleAccess_UpperCased.GetText(Data.Dimension)}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Doubles);
            Builder.Append($"{indentation}public {Data.Vector.Name}({Texts.DoubleTupleElements_LowerCased.GetText(Data.Dimension)}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({Texts.NewScalar_LowerCased.GetText(Data.Dimension)}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_DoubleTuple);
            Builder.Append($"{indentation}public {Data.Vector.Name}(({Texts.DoubleTupleElements_UpperCased.GetText(Data.Dimension)}) components){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({VectorTexts.ComponentTupleAccess_UpperCased.GetText(Data.Dimension)}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Vector);
            Builder.Append($"{indentation}public {Data.Vector.Name}(Vector{Data.Dimension}) components){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({VectorTexts.ComponentTupleAccess_UpperCased.GetText(Data.Dimension)}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            string unitParameterName = SourceBuildingUtility.ToParameterName(Data.Unit.Name);

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Unit_ScalarTuple);
            Builder.Append($"{indentation}public {Data.Vector.Name}(({Texts.ScalarTupleElements_UpperCased.GetText(Data.Dimension)}) components, {Data.Unit.Name} {unitParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this(components * {unitParameterName}.{Data.UnitQuantity.Name}.Magnitude) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Unit_Scalars);
            Builder.Append($"{indentation}public {Data.Vector.Name}({Texts.ScalarTupleElements_LowerCased.GetText(Data.Dimension)}, {Data.Unit.Name} {unitParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this(({VectorTexts.CommaSeparatedNames_LowerCased.GetText(Data.Dimension)}), {unitParameterName}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Unit_Doubles);
            Builder.Append($"{indentation}public {Data.Vector.Name}({Texts.ScalarTupleElements_LowerCased.GetText(Data.Dimension)}, {Data.Unit.Name} {unitParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this(({Texts.NewScalar_LowerCased.GetText(Data.Dimension)}), {unitParameterName}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Unit_DoubleTuple);
            Builder.Append($"{indentation}public {Data.Vector.Name}(({Texts.ScalarTupleElements_UpperCased.GetText(Data.Dimension)}) components, {Data.Unit.Name} {unitParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({VectorTexts.ComponentTupleAccess_UpperCased.GetText(Data.Dimension)}, {unitParameterName}) {{ }}{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, VectorDocumentationTags.Constructor_Unit_Vector);
            Builder.Append($"{indentation}public {Data.Vector.Name}(Vector{Data.Dimension} components, {Data.Unit.Name} {unitParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this(({VectorTexts.ComponentTupleAccess_UpperCased.GetText(Data.Dimension)}), {unitParameterName}) {{ }}{Environment.NewLine}");
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }
    }

    private static class Texts
    {
        public static VectorTexts Zeros { get; } = new("0", ", ");
        public static VectorTexts ScalarTupleElements_UpperCased { get; } = VectorTexts.CommaSeparatedElements_UpperCased("Scalar");
        public static VectorTexts ScalarTupleElements_LowerCased { get; } = VectorTexts.CommaSeparatedElements_UpperCased("Scalar");
        public static VectorTexts DoubleTupleElements_UpperCased { get; } = VectorTexts.CommaSeparatedElements_UpperCased("Scalar");
        public static VectorTexts DoubleTupleElements_LowerCased { get; } = VectorTexts.CommaSeparatedElements_UpperCased("Scalar");

        public static VectorTexts NewComponentType_LowerCased(string componentType)
        {
            return new VectorTexts(newComponentType_LowerCasedComponent, ", ");

            string newComponentType_LowerCasedComponent(int componentIndex, int dimension)
            {
                return $"new {componentType}({VectorTexts.GetLowerCasedComponentName(componentIndex, dimension)})";
            }
        }

        public static VectorTexts NewScalar_LowerCased { get; } = new VectorTexts(NewScalar_LowerCasedComponent, ", ");

        private static string NewScalar_LowerCasedComponent(int componentIndex, int dimension)
        {
            return $"new Scalar({VectorTexts.GetLowerCasedComponentName(componentIndex, dimension)})";
        }
    }
}
