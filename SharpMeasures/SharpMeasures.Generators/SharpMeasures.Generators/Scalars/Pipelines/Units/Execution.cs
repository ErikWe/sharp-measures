namespace SharpMeasures.Generators.Scalars.Pipelines.Units;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;
using SharpMeasures.Generators.Scalars.Processing;
using SharpMeasures.Generators.Units;

using System;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(context, data);

        context.AddSource($"{data.Scalar.Name}_Units.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Scalar.Namespace);

            UsingsBuilding.AppendUsings(Builder, Data.Scalar.Namespace, new string[]
            {
                "SharpMeasures",
                Data.Unit.Namespace
            });

            Builder.Append(Data.Scalar.ComposeDeclaration());

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            foreach (ProcessedScalarConstant constant in Data.Constants)
            {
                AppendDocumentation(indentation, ScalarDocumentationTags.Units.ConstantWithName(constant.Name));
                Builder.Append($"{indentation}public static {Data.Scalar.Name} {constant.Name} => " +
                    $"new({constant.Value}, {Data.Unit.Name}.{constant.Unit.Name});{Environment.NewLine}");
            }

            Builder.AppendLine();

            foreach (UnitInstance includedBase in Data.Bases)
            {
                AppendDocumentation(indentation, ScalarDocumentationTags.Units.BaseWithName(includedBase));
                Builder.Append($"{indentation}public static {Data.Scalar.Name} One{includedBase} => " +
                    $"{Data.Unit.Name}.{includedBase.Name}.{Data.UnitQuantity.Name};{Environment.NewLine}");
            }

            Builder.AppendLine();

            foreach (ProcessedScalarConstant constant in Data.Constants)
            {
                if (constant.GenerateMultiplesProperty)
                {
                    AppendDocumentation(indentation, ScalarDocumentationTags.Units.ConstantMultiples(constant.Name));
                    Builder.Append($"{indentation}public Scalar {constant.MultiplesName!} => Magnitude.Value / {constant.Name}.Magnitude.Value;{Environment.NewLine}");
                }
            }

            Builder.AppendLine();

            foreach (UnitInstance includedUnit in Data.Units)
            {
                AppendDocumentation(indentation, ScalarDocumentationTags.Units.UnitWithName(includedUnit));
                Builder.Append($"{indentation}public static Scalar {includedUnit.Plural} => InUnit({Data.Unit.Name}.{includedUnit.Name});{Environment.NewLine}");
            }
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }
    }
}
