namespace SharpMeasures.Generators.Scalars.Pipelines.StandardMaths;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;

using System;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(context, data);

        context.AddSource($"{data.Scalar.Name}_StandardMaths.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }

        private UsingsCollector UsingsCollector { get; }
        private InterfaceCollector InterfaceCollector { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;

            UsingsCollector = UsingsCollector.Delayed(Builder, data.Scalar.Namespace);
            InterfaceCollector = InterfaceCollector.Delayed(Builder);

            UsingsCollector.AddUsings("SharpMeasures", "SharpMeasures.ScalarAbstractions");
            InterfaceCollector.AddInterfaces(new []
            {
                $"IScalableScalar<{Data.Scalar.Name}>",
                $"IMultiplicableScalar<{Data.Scalar.Name}, Scalar>",
                "IMultiplicableScalar<Unhandled, Unhandled>",
                $"IDivisibleScalar<{Data.Scalar.Name}, Scalar>",
                $"IDivisibleScalar<Scalar, {Data.Scalar.Name}>",
                "IDivisibleScalarQuantity<Unhandled, Unhandled>",
                "IGenericallyMultiplicableScalarQuantity",
                "IGenericallyDivisibleScalarQuantity"
            });
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Scalar.Namespace);

            UsingsCollector.MarkInsertionPoint();

            Builder.Append(Data.Scalar.ComposeDeclaration());

            InterfaceCollector.MarkInsertionPoint();

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);

            InterfaceCollector.InsertInterfaces();
            UsingsCollector.InsertUsings();
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsNaN);
            Builder.Append($"{indentation}public bool IsNaN => double.IsNaN(Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsZero);
            Builder.Append($"{indentation}public bool IsZero => Magnitude.Value is 0;{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsPositive);
            Builder.Append($"{indentation}public bool IsPositive => Magnitude.Value > 0;{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsNegative);
            Builder.Append($"{indentation}public bool IsNegative => Magnitude.Value < 0;{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsFinite);
            Builder.Append($"{indentation}public bool IsFinite => double.IsFinite(Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsInfinity);
            Builder.Append($"{indentation}public bool IsInfinite => double.IsInfinity(Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsPositiveInfinity);
            Builder.Append($"{indentation}public bool IsPositiveInfinity => double.IsPositiveInfinity(Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.IsNegativeInfinity);
            Builder.Append($"{indentation}public bool IsNegativeInfinity => double.IsNegativeInfinity(Magnitude.Value);{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Absolute);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Absolute() => new(Math.Abs(Magnitude.Value));{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Floor);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Floor() => new(Math.Floor(Magnitude.Value));{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Ceiling);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Ceiling() => new(Math.Ceiling(Magnitude.Value));{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Round);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Round() => new(Math.Round(Magnitude.Value));{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Truncate);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Truncate() => new(Math.Truncate(Magnitude.Value));{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Sign);
            Builder.Append($"public int Sign() => Math.Sign(Magnitude.Value);{Environment.NewLine}");

            Builder.AppendLine();

            AppendPowerFunctions(indentation);

            AppendFromPowerFunctions(indentation);

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.UnaryPlus);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Plus() => this;{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Negate);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Negate() => this;{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.UnaryPlus);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator +({Data.Scalar.Name} x) => x;{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Negate);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator -({Data.Scalar.Name} x) => -x;{Environment.NewLine}");

            Builder.AppendLine();

            if (Data.Square is not null)
            {
                InterfaceCollector.AddInterfaces($"IMultiplicableScalar<{Data.Square.Value.Name}, {Data.Scalar.Name}>");

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Multiply_SameType);
                Builder.Append($"{indentation}public {Data.Square.Value.Name} Multiply({Data.Scalar.Name} factor) => new(Magnitude.Value * factor.Magnitude.Value);{Environment.NewLine}");
                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Multiply_SameType);
                Builder.Append($"{indentation}public static {Data.Square.Value.Name} operator *({Data.Scalar.Name} x, {Data.Scalar.Name} y) => new(x.Magnitude.Value * y.Magnitude.Value);{Environment.NewLine}");
                
                Builder.AppendLine();
            }

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Divide_SameType);
            Builder.Append($"{indentation}public Scalar Divide({Data.Scalar.Name} divisor) => new(Magnitude.Value / divisor.Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Divide_SameType);
            Builder.Append($"{indentation}public static Scalar operator /({Data.Scalar.Name} x, {Data.Scalar.Name} y) => new(x.Magnitude.Value / y.Magnitude.Value);{Environment.NewLine}");

            Builder.AppendLine();

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Remainder_Scalar);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Remainder(Scalar divisor) => new(Magnitude.Value % divisor.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Multiply_Scalar);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Multiply(Scalar factor) => new(Magnitude.Value * factor.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Divide_Scalar);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Divide(Scalar divisor) => new(Magnitude.Value / divisor.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Multiply_Scalar_LHS);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator *({Data.Scalar.Name} x, Scalar y) => new(x.Magnitude.Value * y.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Multiply_Scalar_RHS);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator *(Scalar x, {Data.Scalar.Name} y) => new(x.Value * y.Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Divide_Scalar_LHS);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator /({Data.Scalar.Name} x, Scalar y) => new(x.Magnitude.Value / y.Value);{Environment.NewLine}");

            if (Data.Reciprocal is not null)
            {
                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Divide_Scalar_RHS);
                Builder.Append($"{indentation}public static {Data.Reciprocal.Value.Name} operator /(Scalar x, {Data.Scalar.Name} y) => new(x.Value / y.Magnitude.Value);{Environment.NewLine}");
            }

            Builder.AppendLine();

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Remainder_Double);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Remainder(double divisor) => new(Magnitude.Value % divisor);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Multiply_Double);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Multiply(double factor) => new(Magnitude.Value * factor);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Divide_Double);
            Builder.Append($"{indentation}public {Data.Scalar.Name} Divide(double divisor) => new(Magnitude.Value / divisor);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Multiply_Double_LHS);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator *({Data.Scalar.Name} x, double y) => new(x.Magnitude.Value * y);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Multiply_Double_RHS);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator *(double x, {Data.Scalar.Name} y) => new(x * y.Magnitude.Value);{Environment.NewLine}");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Divide_Double_LHS);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} operator /({Data.Scalar.Name} x, double y) => new(x.Magnitude.Value / y);{Environment.NewLine}");

            if (Data.Reciprocal is not null)
            {
                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Operators.Divide_Double_RHS);
                Builder.Append($"{indentation}public static {Data.Reciprocal.Value.Name} operator /(double x, {Data.Scalar.Name} y) => new(x / y.Magnitude.Value);{Environment.NewLine}");
            }

            Builder.AppendLine();

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Multiply_Generic);
            Builder.Append($@"{indentation}public TProductScalar Multiply<TProductScalar, TFactorScalar>(TFactorScalar factor, Func<double, TProductScalar> factory)
{indentation}where TProductScalar : IScalar
{indentation}where TFactorScalar : IScalar
{indentation}{{
{indentation.Increased}ArgumentNullException.ThrowIfNull(factory, nameof(factory));
{indentation.Increased}ArgumentNullException.ThrowIfNull(factor, nameof(factor));

{indentation.Increased}return factory(Magnitude.Value * factor.Magnitude.Value);

{indentation}}}

");

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Divide_Generic);
            Builder.Append($@"{indentation}public TProductScalar Divide<TQuotientScalar, TDivisorScalar>(TDivisorScalar divisor, Func<double, TQuotientScalar> factory)
{indentation}where TQuotientScalar : IScalar
{indentation}where TDivisorScalar : IScalar
{indentation}{{
{indentation.Increased}ArgumentNullException.ThrowIfNull(factory, nameof(factory));
{indentation.Increased}ArgumentNullException.ThrowIfNull(divisor, nameof(divisor));

{indentation.Increased}return factory(Magnitude.Value / divisor.Magnitude.Value);

{indentation}}}

");
            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Multiply_IScalar);
            Builder.Append($@"{indentation}public static Unhandled operator *({Data.Scalar.Name} x, IScalar y)
{indentation}{{
{indentation.Increased}ArgumentNullException.ThrowIfNull(y, nameof(y));

{indentation.Increased}return new Unhandled(x.Magnitude.Value * y.Magnitude.Value);{Environment.NewLine}
{indentation}}}
            
");

            AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Divide_IScalar);
            Builder.Append($@"{indentation}public static Unhandled operator /({Data.Scalar.Name} x, IScalar y)
{indentation}{{
{indentation.Increased}ArgumentNullException.ThrowIfNull(y, nameof(y));

{indentation.Increased}return new Unhandled(x.Magnitude.Value / y.Magnitude.Value);{Environment.NewLine}
{indentation}}}
            
");
        }

        private void AppendPowerFunctions(Indentation indentation)
        {
            int startLength = Builder.Length;

            if (Data.Reciprocal is not null)
            {
                UsingsCollector.AddUsing(Data.Reciprocal.Value.Namespace);

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Reciprocal);
                Builder.Append($"{indentation}public {Data.Reciprocal.Value.Name} Reciprocal() => new(1 / Magnitude.Value);{Environment.NewLine}");
            }

            if (Data.Square is not null)
            {
                UsingsCollector.AddUsing(Data.Square.Value.Namespace);
                UsingsCollector.AddUsing("System");

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Square);
                Builder.Append($"{indentation}public {Data.Square.Value.Name} Square() => new(Math.Pow(Magnitude.Value, 2));{Environment.NewLine}");
            }

            if (Data.Cube is not null)
            {
                UsingsCollector.AddUsing(Data.Cube.Value.Namespace);
                UsingsCollector.AddUsing("System");

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.Cube);
                Builder.Append($"{indentation}public {Data.Cube.Value.Name} Cube() => new(Math.Pow(Magnitude.Value, 3));{Environment.NewLine}");
            }

            if (Data.SquareRoot is not null)
            {
                UsingsCollector.AddUsing(Data.SquareRoot.Value.Namespace);
                UsingsCollector.AddUsing("System");

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.SquareRoot);
                Builder.Append($"{indentation}public {Data.SquareRoot.Value.Name} SquareRoot() => new(Math.Sqrt(Magnitude.Value));{Environment.NewLine}");
            }

            if (Data.CubeRoot is not null)
            {
                UsingsCollector.AddUsing(Data.CubeRoot.Value.Namespace);
                UsingsCollector.AddUsing("System");

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.CubeRoot);
                Builder.Append($"{indentation}public {Data.CubeRoot.Value.Name} CubeRoot() => new(Math.Cbrt(Magnitude.Value));{Environment.NewLine}");
            }

            if (Builder.Length > startLength)
            {
                Builder.AppendLine();
            }
        }

        private void AppendFromPowerFunctions(Indentation indentation)
        {
            int startLength = Builder.Length;

            if (Data.Reciprocal is not null)
            {
                string parameterName = SourceBuildingUtility.ToParameterName(Data.Reciprocal.Value.Name);

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.FromReciprocal);
                Builder.Append($"{indentation}public {Data.Scalar.Name} From({Data.Reciprocal.Value.Name} {parameterName}) => " +
                    $"new(1 / {parameterName}.Magnitude.Value);{Environment.NewLine}");
            }

            if (Data.Square is not null)
            {
                string parameterName = SourceBuildingUtility.ToParameterName(Data.Square.Value.Name);

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.FromSquare);
                Builder.Append($"{indentation}public {Data.Scalar.Name} From({Data.Square.Value.Name} {parameterName}) => " +
                    $"new(Math.Sqrt({parameterName}.Magnitude.Value));{Environment.NewLine}");
            }

            if (Data.Cube is not null)
            {
                string parameterName = SourceBuildingUtility.ToParameterName(Data.Cube.Value.Name);

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.FromCube);
                Builder.Append($"{indentation}public {Data.Scalar.Name} From({Data.Cube.Value.Name} {parameterName}) => " +
                    $"new(Math.Cbrt({parameterName}.Magnitude.Value));{Environment.NewLine}");
            }

            if (Data.SquareRoot is not null)
            {
                string parameterName = SourceBuildingUtility.ToParameterName(Data.SquareRoot.Value.Name);

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.FromSquareRoot);
                Builder.Append($"{indentation}public {Data.Scalar.Name} From({Data.SquareRoot.Value.Name} {parameterName}) => " +
                    $"new(Math.Pow({parameterName}.Magnitude.Value, 2));{Environment.NewLine}");
            }

            if (Data.CubeRoot is not null)
            {
                string parameterName = SourceBuildingUtility.ToParameterName(Data.CubeRoot.Value.Name);

                AppendDocumentation(indentation, ScalarDocumentationTags.StandardMaths.FromCubeRoot);
                Builder.Append($"{indentation}public {Data.Scalar.Name} From({Data.CubeRoot.Value.Name} {parameterName}) => " +
                    $"new(Math.Pow({parameterName}.Magnitude.Value, 3));{Environment.NewLine}");
            }

            if (Builder.Length > startLength)
            {
                Builder.AppendLine();
            }
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }
    }
}
