namespace SharpMeasures.Generators.Scalars.Pipeline.MiscPipeline;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SharpMeasures.Generators.SourceBuilding;

using System;
using System.Text;

internal static class Execution
{
    public static void Execute(SourceProductionContext context, DataModel data)
    {
        string source = Composer.Compose(context, data);

        context.AddSource($"{data.Scalar.Name}_Misc.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private class Composer
    {
        public static string Compose(SourceProductionContext context, DataModel data)
        {
            Composer composer = new(context, data);
            composer.Compose();
            return composer.Retrieve();
        }

        private SourceProductionContext Context { get; }
        private StringBuilder Builder { get; } = new();

        private DataModel Data { get; }

        private Composer(SourceProductionContext context, DataModel data)
        {
            Context = context;
            Data = data;
        }

        private void Compose()
        {
            StaticBuilding.AppendAutoGeneratedHeader(Builder);
            StaticBuilding.AppendNullableDirective(Builder);

            NamespaceBuilding.AppendNamespace(Builder, Data.Scalar.Namespace);

            UsingsBuilding.AppendUsings(Builder, Data.Scalar.Namespace, new string[]
            {
                "SharpMeasures",
                Data.Unit.Namespace
            });

            AppendDocumentation(new Indentation(0), DocumentationTags.ScalarHeader);
            Builder.Append(Data.Scalar.ComposeDeclaration());

            InterfaceBuilding.AppendInterfaceImplementation(Builder, new string[]
            {
                $"IScalar"
            });

            BlockBuilding.AppendBlock(Builder, ComposeTypeBlock, originalIndentationLevel: 0);
        }

        private string Retrieve()
        {
            return Builder.ToString();
        }

        private void ComposeTypeBlock(Indentation indentation)
        {
            AppendDocumentation(indentation, DocumentationTags.Zero);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} Zero {{ get; }} = new(0);{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.Magnitude);
            Builder.Append($"{indentation}public Scalar Magnitude {{ get; }}{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.Constructor_Scalar);
            Builder.Append($@"{indentation}public {Data.Scalar.Name}(Scalar magnitude)
{indentation}{{
{indentation.Increased}Magnitude = magnitude;
{indentation}}}
");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.Constructor_Double);
            Builder.Append($"{indentation}public {Data.Scalar.Name}(double magnitude){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this(new Scalar(magnitude)) {{ }}{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.Constructor_DoubleUnit);
            Builder.Append($"{indentation}public {Data.Scalar.Name}(double magnitude, {Data.Unit.Name} {Data.Unit.ParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this({ConstructorComputeMagnitude()}) {{ }}{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.Constructor_ScalarUnit);
            Builder.Append($"{indentation}public {Data.Scalar.Name}(Scalar magnitude, {Data.Unit.Name} {Data.Unit.ParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}: this(magnitude.Value, {Data.Unit.ParameterName}) {{ }}{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.InUnit);
            Builder.Append($"{indentation}public Scalar InUnit({Data.Unit.Name} {Data.Unit.ParameterName}){Environment.NewLine}");
            Builder.Append($"{indentation.Increased}=> new({InUnitComputeMagnitude()});{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.ToScalar);
            Builder.Append($"{indentation}public Scalar ToScalar() => Magnitude;{Environment.NewLine}");
            AppendDocumentation(indentation, DocumentationTags.Operators.ToScalar);
            Builder.Append($"{indentation}public static explicit operator Scalar({Data.Scalar.Name} x) => x.Magnitude;{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.ToDouble);
            Builder.Append($"{indentation}public double ToDouble() => Magnitude.Value;{Environment.NewLine}");
            AppendDocumentation(indentation, DocumentationTags.Operators.ToDouble);
            Builder.Append($"{indentation}public static explicit operator double({Data.Scalar.Name} x) => x.Magnitude.Value;{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.FromScalar);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} FromScalar(Scalar x) => new(x);{Environment.NewLine}");
            AppendDocumentation(indentation, DocumentationTags.Operators.FromScalar);
            Builder.Append($"{indentation}public static explicit operator {Data.Scalar.Name}(Scalar x) => new(x);{Environment.NewLine}");

            Builder.Append(Environment.NewLine);

            AppendDocumentation(indentation, DocumentationTags.FromDouble);
            Builder.Append($"{indentation}public static {Data.Scalar.Name} FromDouble(double x) => new(x);{Environment.NewLine}");
            AppendDocumentation(indentation, DocumentationTags.Operators.FromDouble);
            Builder.Append($"{indentation}public static explicit operator {Data.Scalar.Name}(double x) => new(x);{Environment.NewLine}");
        }

        private string ConstructorComputeMagnitude()
        {
            string unitMagnitude = $"{Data.Unit.ParameterName}.{Data.UnitQuantity.Name}.Magnitude.Value";

            if (Data.Biased)
            {
                return $"(magnitude - {Data.Unit.ParameterName}.Offset) * {unitMagnitude}";
            }

            return $"magnitude * {unitMagnitude}";
        }

        private string InUnitComputeMagnitude()
        {
            string scaled = $"Magnitude.Value / {Data.Unit.ParameterName}.{Data.Unit.ParameterName}.Magnitude.Value";

            if (Data.Biased)
            {
                return $"{scaled} + {Data.Unit.ParameterName}.Offset";
            }

            return scaled;
        }

        private void AppendDocumentation(Indentation indentation, string tag)
        {
            DocumentationBuilding.AppendDocumentation(Context, Builder, Data.Documentation, indentation, tag);
        }
    }
}
