//HintName: Temperature.Maths.g.cs
//----------------------
// <auto-generated>
//      This file was generated by SharpMeasures.Generators.Scalars <stamp>
//
//      Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//----------------------

#nullable enable

public partial class Temperature
{
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsNaN"/>
    public bool IsNaN => double.IsNaN(Magnitude.Value);
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsZero"/>
    public bool IsZero => Magnitude.Value is 0;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsPositive"/>
    public bool IsPositive => Magnitude.Value > 0;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsNegative"/>
    public bool IsNegative => Magnitude.Value < 0;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsFinite"/>
    public bool IsFinite => double.IsFinite(Magnitude.Value);
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsInfinite"/>
    public bool IsInfinite => double.IsInfinity(Magnitude.Value);
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsPositiveInfinity"/>
    public bool IsPositiveInfinity => double.IsPositiveInfinity(Magnitude.Value);
    /// <inheritdoc cref="global::SharpMeasures.Scalar.IsNegativeInfinity"/>
    public bool IsNegativeInfinity => double.IsNegativeInfinity(Magnitude.Value);

    /// <inheritdoc cref="global::SharpMeasures.Scalar.Absolute"/>
    public Temperature Absolute() => new(global::System.Math.Abs(Magnitude.Value));

    /// <inheritdoc cref="global::SharpMeasures.Scalar.Sign"/>
    public int Sign() => global::System.Math.Sign(Magnitude.Value);

    /// <inheritdoc cref="global::SharpMeasures.Scalar.Add(global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public global::Temperature Add(global::Temperature addend)
    {
        global::System.ArgumentNullException.ThrowIfNull(addend);

        return new(Magnitude.Value + addend.Magnitude.Value);
    }

    /// <inheritdoc cref="global::SharpMeasures.Scalar.Add(global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public global::Temperature Subtract(global::Temperature subtrahend)
    {
        global::System.ArgumentNullException.ThrowIfNull(subtrahend);

        return new(Magnitude.Value - subtrahend.Magnitude.Value);
    }

    /// <inheritdoc/>
    public global::Temperature Plus() => this;
    /// <inheritdoc/>
    public global::Temperature Negate() => new(-Magnitude.Value);

    /// <inheritdoc/>
    public global::Temperature Multiply(global::SharpMeasures.Scalar factor) => new(Magnitude.Value * factor.Value);
    /// <inheritdoc/>
    public global::Temperature Divide(global::SharpMeasures.Scalar divisor) => new(Magnitude.Value / divisor.Value);

    /// <inheritdoc cref="global::SharpMeasures.Scalar.Divide(global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public global::SharpMeasures.Scalar Divide(global::Temperature divisor)
    {
        global::System.ArgumentNullException.ThrowIfNull(divisor);

        return new(Magnitude.Value / divisor.Magnitude.Value);
    }

    /// <inheritdoc/>
    public static global::Temperature operator +(global::Temperature x) => x;

    /// <inheritdoc/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::Temperature operator -(global::Temperature x)
    {
        global::System.ArgumentNullException.ThrowIfNull(x);

        return new(-x.Magnitude.Value);
    }

    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator +(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::Temperature operator +(global::Temperature x, global::Temperature y)
    {
        global::System.ArgumentNullException.ThrowIfNull(x);
        global::System.ArgumentNullException.ThrowIfNull(y);

        return new(x.Magnitude.Value + y.Magnitude.Value);
    }

    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator -(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::Temperature operator -(global::Temperature x, global::Temperature y)
    {
        global::System.ArgumentNullException.ThrowIfNull(x);
        global::System.ArgumentNullException.ThrowIfNull(y);

        return new(x.Magnitude.Value - y.Magnitude.Value);
    }

    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator /(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::SharpMeasures.Scalar operator /(global::Temperature x, global::Temperature y)
    {
        global::System.ArgumentNullException.ThrowIfNull(x);
        global::System.ArgumentNullException.ThrowIfNull(y);

        return new(x.Magnitude.Value / y.Magnitude.Value);
    }

    /// <inheritdoc/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::Temperature operator *(global::Temperature x, global::SharpMeasures.Scalar y)
    {
        global::System.ArgumentNullException.ThrowIfNull(x);

        return new(x.Magnitude.Value * y.Value);
    }

    /// <inheritdoc/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::Temperature operator *(global::SharpMeasures.Scalar x, global::Temperature y)
    {
        global::System.ArgumentNullException.ThrowIfNull(y);

        return new(x.Value * y.Magnitude.Value);
    }

    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator /(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    /// <exception cref="global::System.ArgumentNullException"/>
    public static global::Temperature operator /(global::Temperature x, global::SharpMeasures.Scalar y)
    {
        global::System.ArgumentNullException.ThrowIfNull(x);

        return new(x.Magnitude.Value / y.Value);
    }
}
