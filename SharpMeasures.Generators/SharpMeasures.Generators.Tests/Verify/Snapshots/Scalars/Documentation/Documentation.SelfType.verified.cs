//HintName: SelfType.Common.g.cs
//----------------------
// <auto-generated>
//      This file was generated by SharpMeasures.Generators.Scalars <stamp>
//
//      Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//----------------------

#nullable enable

/// <summary>This is a cref="SelfType"/>.</summary>
public partial class SelfType :
    global::SharpMeasures.IScalarQuantity<global::SelfType>,
    global::System.IComparable<global::SelfType>,
    global::System.IEquatable<global::SelfType>
{
    /// <summary>The <see cref="global::SelfType"/> representing { 0 }.</summary>
    public static global::SelfType Zero { get; } = new(0);

    /// <summary>The magnitude of <see langword="this"/>, expressed in an arbitrary unit.</summary>
    /// <remarks>In most cases, expressing the magnitude in a specified <see cref="global::UnitOfDocTest"/> should be preferred. This is achieved through <see cref="InUnit(global::UnitOfDocTest)"/>.</remarks>
    public global::SharpMeasures.Scalar Magnitude { get; }

    /// <summary>Constructs a new <see cref="global::SelfType"/> representing { <paramref name="magnitude"/> }, expressed in an arbitrary unit.</summary>
    /// <param name="magnitude">The magnitude represented by the constructed <see cref="global::SelfType"/>, expressed in an arbitrary unit.</param>
    /// <remarks>Consider preferring construction through <see cref="global::SelfType(global::SharpMeasures.Scalar, global::UnitOfDocTest)"/>, where the magnitude is expressed in
    /// a specified <see cref="global::UnitOfDocTest"/>.</remarks>
    public SelfType(global::SharpMeasures.Scalar magnitude)
    {
        Magnitude = magnitude;
    }

    /// <summary>Constructs a new <see cref="global::SelfType"/> representing { <paramref name="magnitude"/> }, when expressed in <paramref name="unitOfDocTest"/>.</summary>
    /// <param name="magnitude">The magnitude represented by the constructed <see cref="global::SelfType"/>, when expressed in <paramref name="unitOfDocTest"/>.</param>
    /// <param name="unitOfDocTest">The <see cref="global::UnitOfDocTest"/> in which <paramref name="magnitude"/> is expressed.</param>
    /// <exception cref="global::System.ArgumentNullException"/>
    public SelfType(global::SharpMeasures.Scalar magnitude, global::UnitOfDocTest unitOfDocTest)
        : this(ComputeRepresentedMagnitude(magnitude, unitOfDocTest)) { }

    /// <summary>The magnitude of <see langword="this"/>, expressed in <paramref name="unitOfDocTest"/>.</summary>
    /// <param name="unitOfDocTest">The <see cref="global::UnitOfDocTest"/> in which the magnitude of <see langword="this"/> is expressed.</param>
    /// <exception cref="global::System.ArgumentNullException"/>
    public global::SharpMeasures.Scalar InUnit(global::UnitOfDocTest unitOfDocTest)
    {
        global::System.ArgumentNullException.ThrowIfNull(unitOfDocTest);

        return new(Magnitude / unitOfDocTest.SelfType.Magnitude);
    }

    /// <summary>Formats the represented <see cref="Magnitude"/> using the current culture.</summary>
    public override string ToString() => ToString(global::System.Globalization.CultureInfo.CurrentCulture);

    /// <summary>Formats the represented <see cref="Magnitude"/> according to <paramref name="format"/>, using the current culture.</summary>
    public string ToString(string? format) => ToString(format, global::System.Globalization.CultureInfo.CurrentCulture);

    /// <summary>Formats the represented <see cref="Magnitude"/> using the culture-specific formatting information provided by <paramref name="formatProvider"/>.</summary>
    public string ToString(global::System.IFormatProvider? formatProvider) => ToString("G", formatProvider);

    /// <summary>Formats the represented <see cref="Magnitude"/> according to <paramref name="format"/>, using the culture-specific formatting information provided by <paramref name="formatProvider"/>.</summary>
    public string ToString(string? format, global::System.IFormatProvider? formatProvider) => Magnitude.ToString(format, formatProvider);

    /// <inheritdoc/>
    public virtual bool Equals(global::SelfType? other) => other is not null && Magnitude.Value == other.Magnitude.Value;

    /// <inheritdoc/>
    public override bool Equals(object? obj) => obj is global::SelfType other && Equals(other);

    /// <summary>Indicates whether <paramref name="lhs"/> and <paramref name="rhs"/> represent equivalent magnitudes.</summary>
    /// <param name="lhs">The left-hand side of the equality check.</param>
    /// <param name="rhs">The right-hand side of the equality check.</param>
    public static bool operator ==(global::SelfType? lhs, global::SelfType? rhs) => lhs?.Equals(rhs) ?? rhs is null;

    /// <summary>Indicates whether <paramref name="lhs"/> and <paramref name="rhs"/> represent inequivalent magnitudes.</summary>
    /// <param name="lhs">The left-hand side of the inequality check.</param>
    /// <param name="rhs">The right-hand side of the inequality check.</param>
    public static bool operator !=(global::SelfType? lhs, global::SelfType? rhs) => (lhs == rhs) is false;

    /// <inheritdoc/>
    public override int GetHashCode() => Magnitude.GetHashCode();

    /// <inheritdoc cref="global::SharpMeasures.Scalar.CompareTo(global::SharpMeasures.Scalar)"/>
    public int CompareTo(global::SelfType? other) => Magnitude.Value.CompareTo(other?.Magnitude.Value);

    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &lt;(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator <(global::SelfType? x, global::SelfType? y) => x?.Magnitude.Value < y?.Magnitude.Value;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &gt;(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator >(global::SelfType? x, global::SelfType? y) => x?.Magnitude.Value > y?.Magnitude.Value;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &lt;=(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator <=(global::SelfType? x, global::SelfType? y) => x?.Magnitude.Value <= y?.Magnitude.Value;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &gt;=(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator >=(global::SelfType? x, global::SelfType? y) => x?.Magnitude.Value >= y?.Magnitude.Value;

    /// <inheritdoc/>
    static global::SelfType global::SharpMeasures.IScalarQuantity<global::SelfType>.WithMagnitude(global::SharpMeasures.Scalar magnitude) => new(magnitude);

    /// <summary>Computes the represented magnitude based on a magnitude, <paramref name="magnitude"/>, expressed in
    /// a certain unit <paramref name="unitOfDocTest"/>.</summary>
    /// <param name="magnitude">The magnitude expressed in a certain unit <paramref name="unitOfDocTest"/>.</param>
    /// <param name="unitOfDocTest">The <see cref="global::UnitOfDocTest"/> in which <paramref name="magnitude"/> is expressed.</param>
    /// <exception cref="global::System.ArgumentNullException"/>
    private static global::SharpMeasures.Scalar ComputeRepresentedMagnitude(global::SharpMeasures.Scalar magnitude, global::UnitOfDocTest unitOfDocTest)
    {
        global::System.ArgumentNullException.ThrowIfNull(unitOfDocTest);

        return magnitude * unitOfDocTest.SelfType.Magnitude;
    }
}
