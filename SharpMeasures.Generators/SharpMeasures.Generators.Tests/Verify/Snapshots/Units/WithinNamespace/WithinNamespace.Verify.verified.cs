//HintName: Test.Testing.Tests.UnitTests.UnitOfLength.Common.g.cs
//----------------------
// <auto-generated>
//      This file was generated by SharpMeasures.Generators.Units <stamp>
//
//      Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//----------------------

#nullable enable

namespace Test.Testing.Tests.UnitTests;

/// <summary>A unit of measurement, primarily describing <see cref="global::Test.Testing.Tests.UnitTests.Length"/>.</summary>
public partial class UnitOfLength :
    global::System.IComparable<UnitOfLength>,
    global::System.IEquatable<UnitOfLength>
{
    /// <summary>The <see cref="global::Test.Testing.Tests.UnitTests.Length"/> described by <see langword="this"/>.</summary>
    public global::Test.Testing.Tests.UnitTests.Length Length { get; }

    /// <summary>Constructs a new <see cref="global::Test.Testing.Tests.UnitTests.UnitOfLength"/>, describing <paremref name="length"/>.</summary>
    /// <param name="length">The <see cref="global::Test.Testing.Tests.UnitTests.Length"/> described by the constructed <see cref="global::Test.Testing.Tests.UnitTests.UnitOfLength"/>.</param>
    /// <exception cref="global::System.ArgumentNullException"/>
    private UnitOfLength(global::Test.Testing.Tests.UnitTests.Length length)
    {
        global::System.ArgumentNullException.ThrowIfNull(length);

        Length = length;
    }

    /// <summary>Scales the <see cref="global::Test.Testing.Tests.UnitTests.Length"/> described by <see langword="this"/> by <paramref name="scale"/> to derive a new <see cref="global::Test.Testing.Tests.UnitTests.UnitOfLength"/>.</summary>
    /// <param name="scale">The described <see cref="global::Test.Testing.Tests.UnitTests.Length"/> is scaled by this value.</param>
    public global::Test.Testing.Tests.UnitTests.UnitOfLength ScaledBy(global::SharpMeasures.Scalar scale) => new(Length * scale);

    /// <summary>Prefixes the <see cref="global::Test.Testing.Tests.UnitTests.Length"/> described by <see langword="this"/> with <paramref name="prefix"/> to derive a new <see cref="global::Test.Testing.Tests.UnitTests.UnitOfLength"/>.</summary>
    /// <param name="prefix">The described <see cref="global::Test.Testing.Tests.UnitTests.Length"/> is prefixed by this <see cref="global::SharpMeasures.IPrefix"/>.</param>
    /// <remarks>Repeated invokation will <i>stack</i> the prefixes, rather than <i>replace</i> the previously applied <see cref="global::SharpMeasures.IPrefix"/>.</remarks>
    /// <exception cref="global::System.ArgumentNullException"/>
    public global::Test.Testing.Tests.UnitTests.UnitOfLength WithPrefix<TPrefix>(TPrefix prefix) where TPrefix : global::SharpMeasures.IPrefix
    {
        global::System.ArgumentNullException.ThrowIfNull(prefix);

        return new(Length * prefix.Factor);
    }

    ///<summary>Produces a description of <see langword="this"/> containing the described <see cref="global::Test.Testing.Tests.UnitTests.Length"/>.</summary>
    public override string ToString() => Length.ToString();

    /// <inheritdoc/>
    public virtual bool Equals(global::Test.Testing.Tests.UnitTests.UnitOfLength? other) => other is not null && Length == other.Length;

    /// <inheritdoc/>
    public override bool Equals(object? obj) => obj is global::Test.Testing.Tests.UnitTests.UnitOfLength other && Equals(other);

    /// <summary>Indicates whether <paramref name="lhs"/> and <paramref name="rhs"/> represent equivalent <see cref="global::Test.Testing.Tests.UnitTests.Length"/>.</summary>
    /// <param name="lhs">The left-hand side of the equality check.</param>
    /// <param name="rhs">The right-hand side of the equality check.</param>
    public static bool operator ==(global::Test.Testing.Tests.UnitTests.UnitOfLength? lhs, global::Test.Testing.Tests.UnitTests.UnitOfLength? rhs) => lhs?.Equals(rhs) ?? rhs is null;

    /// <summary>Indicates whether <paramref name="lhs"/> and <paramref name="rhs"/> represent inequivalent <see cref="global::Test.Testing.Tests.UnitTests.Length"/>.</summary>
    /// <param name="lhs">The left-hand side of the inequality check.</param>
    /// <param name="rhs">The right-hand side of the inequality check.</param>
    public static bool operator !=(global::Test.Testing.Tests.UnitTests.UnitOfLength? lhs, global::Test.Testing.Tests.UnitTests.UnitOfLength? rhs) => (lhs == rhs) is false;

    /// <inheritdoc/>
    public override int GetHashCode() => Length.GetHashCode();

    /// <inheritdoc cref="global::SharpMeasures.Scalar.CompareTo(global::SharpMeasures.Scalar)"/>
    public int CompareTo(global::Test.Testing.Tests.UnitTests.UnitOfLength? other) => Length.Magnitude.Value.CompareTo(other?.Length.Magnitude.Value);

    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &lt;(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator <(global::Test.Testing.Tests.UnitTests.UnitOfLength? x, global::Test.Testing.Tests.UnitTests.UnitOfLength? y) => x?.Length.Magnitude.Value < y?.Length.Magnitude.Value;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &gt;(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator >(global::Test.Testing.Tests.UnitTests.UnitOfLength? x, global::Test.Testing.Tests.UnitTests.UnitOfLength? y) => x?.Length.Magnitude.Value > y?.Length.Magnitude.Value;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &lt;=(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator <=(global::Test.Testing.Tests.UnitTests.UnitOfLength? x, global::Test.Testing.Tests.UnitTests.UnitOfLength? y) => x?.Length.Magnitude.Value <= y?.Length.Magnitude.Value;
    /// <inheritdoc cref="global::SharpMeasures.Scalar.operator &gt;=(global::SharpMeasures.Scalar, global::SharpMeasures.Scalar)"/>
    public static bool operator >=(global::Test.Testing.Tests.UnitTests.UnitOfLength? x, global::Test.Testing.Tests.UnitTests.UnitOfLength? y) => x?.Length.Magnitude.Value >= y?.Length.Magnitude.Value;
}
